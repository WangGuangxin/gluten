== Physical Plan ==
AdaptiveSparkPlan (62)
+- == Final Plan ==
   VeloxColumnarToRow (41)
   +- ^ SortExecTransformer (39)
      +- ^ InputIteratorTransformer (38)
         +- VeloxResizeBatches (36)
            +- ShuffleQueryStage (35), Statistics(X)
               +- ColumnarExchange (34)
                  +- VeloxResizeBatches (33)
                     +- ^ RegularHashAggregateExecTransformer (31)
                        +- ^ InputIteratorTransformer (30)
                           +- VeloxResizeBatches (28)
                              +- ShuffleQueryStage (27), Statistics(X)
                                 +- ColumnarExchange (26)
                                    +- VeloxResizeBatches (25)
                                       +- ^ ProjectExecTransformer (23)
                                          +- ^ FlushableHashAggregateExecTransformer (22)
                                             +- ^ RegularHashAggregateExecTransformer (21)
                                                +- ^ InputIteratorTransformer (20)
                                                   +- VeloxResizeBatches (18)
                                                      +- ShuffleQueryStage (17), Statistics(X)
                                                         +- ColumnarExchange (16)
                                                            +- VeloxResizeBatches (15)
                                                               +- ^ ProjectExecTransformer (13)
                                                                  +- ^ FlushableHashAggregateExecTransformer (12)
                                                                     +- ^ ProjectExecTransformer (11)
                                                                        +- ^ BroadcastHashJoinExecTransformer Inner BuildRight (10)
                                                                           :- ^ FilterExecTransformer (2)
                                                                           :  +- ^ ScanTransformer parquet  (1)
                                                                           +- ^ InputIteratorTransformer (9)
                                                                              +- BroadcastQueryStage (7), Statistics(X)
                                                                                 +- ColumnarBroadcastExchange (6)
                                                                                    +- ^ FilterExecTransformer (4)
                                                                                       +- ^ ScanTransformer parquet  (3)
+- == Initial Plan ==
   Sort (61)
   +- Exchange (60)
      +- HashAggregate (59)
         +- Exchange (58)
            +- HashAggregate (57)
               +- HashAggregate (56)
                  +- Exchange (55)
                     +- HashAggregate (54)
                        +- Project (53)
                           +- BroadcastHashJoin Inner BuildRight (52)
                              :- BroadcastHashJoin LeftAnti BuildRight (48)
                              :  :- Filter (43)
                              :  :  +- Scan parquet (42)
                              :  +- BroadcastExchange (47)
                              :     +- Project (46)
                              :        +- Filter (45)
                              :           +- Scan parquet (44)
                              +- BroadcastExchange (51)
                                 +- Filter (50)
                                    +- Scan parquet (49)


(1) ScanTransformer parquet 
Output [2]: [ps_partkey#X, ps_suppkey#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(ps_partkey)]
ReadSchema: struct<ps_partkey:bigint,ps_suppkey:bigint>

(2) FilterExecTransformer
Input [2]: [ps_partkey#X, ps_suppkey#X]
Arguments: isnotnull(ps_partkey#X)

(3) ScanTransformer parquet 
Output [4]: [p_partkey#X, p_brand#X, p_type#X, p_size#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(p_brand), IsNotNull(p_type), Not(EqualTo(p_brand,Brand#X)), Not(StringStartsWith(p_type,MEDIUM POLISHED)), In(p_size, [14,19,23,3,36,45,49,9]), IsNotNull(p_partkey)]
ReadSchema: struct<p_partkey:bigint,p_brand:string,p_type:string,p_size:int>

(4) FilterExecTransformer
Input [4]: [p_partkey#X, p_brand#X, p_type#X, p_size#X]
Arguments: (((((isnotnull(p_brand#X) AND isnotnull(p_type#X)) AND NOT (p_brand#X = Brand#X)) AND NOT StartsWith(p_type#X, MEDIUM POLISHED)) AND p_size#X IN (49,14,23,45,19,3,36,9)) AND isnotnull(p_partkey#X))

(5) WholeStageCodegenTransformer (X)
Input [4]: [p_partkey#X, p_brand#X, p_type#X, p_size#X]
Arguments: false

(6) ColumnarBroadcastExchange
Input [4]: [p_partkey#X, p_brand#X, p_type#X, p_size#X]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, false]),false), [plan_id=X]

(7) BroadcastQueryStage
Output [4]: [p_partkey#X, p_brand#X, p_type#X, p_size#X]
Arguments: X

(8) InputAdapter
Input [4]: [p_partkey#X, p_brand#X, p_type#X, p_size#X]

(9) InputIteratorTransformer
Input [4]: [p_partkey#X, p_brand#X, p_type#X, p_size#X]

(10) BroadcastHashJoinExecTransformer
Left keys [1]: [ps_partkey#X]
Right keys [1]: [p_partkey#X]
Join type: Inner
Join condition: None

(11) ProjectExecTransformer
Output [4]: [ps_suppkey#X, p_brand#X, p_type#X, p_size#X]
Input [6]: [ps_partkey#X, ps_suppkey#X, p_partkey#X, p_brand#X, p_type#X, p_size#X]

(12) FlushableHashAggregateExecTransformer
Input [4]: [ps_suppkey#X, p_brand#X, p_type#X, p_size#X]
Keys [4]: [p_brand#X, p_type#X, p_size#X, ps_suppkey#X]
Functions: []
Aggregate Attributes: []
Results [4]: [p_brand#X, p_type#X, p_size#X, ps_suppkey#X]

(13) ProjectExecTransformer
Output [5]: [hash(p_brand#X, p_type#X, p_size#X, ps_suppkey#X, 42) AS hash_partition_key#X, p_brand#X, p_type#X, p_size#X, ps_suppkey#X]
Input [4]: [p_brand#X, p_type#X, p_size#X, ps_suppkey#X]

(14) WholeStageCodegenTransformer (X)
Input [5]: [hash_partition_key#X, p_brand#X, p_type#X, p_size#X, ps_suppkey#X]
Arguments: false

(15) VeloxResizeBatches
Input [5]: [hash_partition_key#X, p_brand#X, p_type#X, p_size#X, ps_suppkey#X]
Arguments: X, X

(16) ColumnarExchange
Input [5]: [hash_partition_key#X, p_brand#X, p_type#X, p_size#X, ps_suppkey#X]
Arguments: hashpartitioning(p_brand#X, p_type#X, p_size#X, ps_suppkey#X, 1), ENSURE_REQUIREMENTS, [p_brand#X, p_type#X, p_size#X, ps_suppkey#X], [plan_id=X], [shuffle_writer_type=hash]

(17) ShuffleQueryStage
Output [4]: [p_brand#X, p_type#X, p_size#X, ps_suppkey#X]
Arguments: X

(18) VeloxResizeBatches
Input [4]: [p_brand#X, p_type#X, p_size#X, ps_suppkey#X]
Arguments: X, X

(19) InputAdapter
Input [4]: [p_brand#X, p_type#X, p_size#X, ps_suppkey#X]

(20) InputIteratorTransformer
Input [4]: [p_brand#X, p_type#X, p_size#X, ps_suppkey#X]

(21) RegularHashAggregateExecTransformer
Input [4]: [p_brand#X, p_type#X, p_size#X, ps_suppkey#X]
Keys [4]: [p_brand#X, p_type#X, p_size#X, ps_suppkey#X]
Functions: []
Aggregate Attributes: []
Results [4]: [p_brand#X, p_type#X, p_size#X, ps_suppkey#X]

(22) FlushableHashAggregateExecTransformer
Input [4]: [p_brand#X, p_type#X, p_size#X, ps_suppkey#X]
Keys [3]: [p_brand#X, p_type#X, p_size#X]
Functions [1]: [partial_count(distinct ps_suppkey#X)]
Aggregate Attributes [1]: [count(ps_suppkey#X)#X]
Results [4]: [p_brand#X, p_type#X, p_size#X, count#X]

(23) ProjectExecTransformer
Output [5]: [hash(p_brand#X, p_type#X, p_size#X, 42) AS hash_partition_key#X, p_brand#X, p_type#X, p_size#X, count#X]
Input [4]: [p_brand#X, p_type#X, p_size#X, count#X]

(24) WholeStageCodegenTransformer (X)
Input [5]: [hash_partition_key#X, p_brand#X, p_type#X, p_size#X, count#X]
Arguments: false

(25) VeloxResizeBatches
Input [5]: [hash_partition_key#X, p_brand#X, p_type#X, p_size#X, count#X]
Arguments: X, X

(26) ColumnarExchange
Input [5]: [hash_partition_key#X, p_brand#X, p_type#X, p_size#X, count#X]
Arguments: hashpartitioning(p_brand#X, p_type#X, p_size#X, 1), ENSURE_REQUIREMENTS, [p_brand#X, p_type#X, p_size#X, count#X], [plan_id=X], [shuffle_writer_type=hash]

(27) ShuffleQueryStage
Output [4]: [p_brand#X, p_type#X, p_size#X, count#X]
Arguments: X

(28) VeloxResizeBatches
Input [4]: [p_brand#X, p_type#X, p_size#X, count#X]
Arguments: X, X

(29) InputAdapter
Input [4]: [p_brand#X, p_type#X, p_size#X, count#X]

(30) InputIteratorTransformer
Input [4]: [p_brand#X, p_type#X, p_size#X, count#X]

(31) RegularHashAggregateExecTransformer
Input [4]: [p_brand#X, p_type#X, p_size#X, count#X]
Keys [3]: [p_brand#X, p_type#X, p_size#X]
Functions [1]: [count(distinct ps_suppkey#X)]
Aggregate Attributes [1]: [count(ps_suppkey#X)#X]
Results [4]: [p_brand#X, p_type#X, p_size#X, count(ps_suppkey#X)#X AS supplier_cnt#X]

(32) WholeStageCodegenTransformer (X)
Input [4]: [p_brand#X, p_type#X, p_size#X, supplier_cnt#X]
Arguments: false

(33) VeloxResizeBatches
Input [4]: [p_brand#X, p_type#X, p_size#X, supplier_cnt#X]
Arguments: X, X

(34) ColumnarExchange
Input [4]: [p_brand#X, p_type#X, p_size#X, supplier_cnt#X]
Arguments: rangepartitioning(supplier_cnt#X DESC NULLS LAST, p_brand#X ASC NULLS FIRST, p_type#X ASC NULLS FIRST, p_size#X ASC NULLS FIRST, 1), ENSURE_REQUIREMENTS, [plan_id=X], [shuffle_writer_type=hash]

(35) ShuffleQueryStage
Output [4]: [p_brand#X, p_type#X, p_size#X, supplier_cnt#X]
Arguments: X

(36) VeloxResizeBatches
Input [4]: [p_brand#X, p_type#X, p_size#X, supplier_cnt#X]
Arguments: X, X

(37) InputAdapter
Input [4]: [p_brand#X, p_type#X, p_size#X, supplier_cnt#X]

(38) InputIteratorTransformer
Input [4]: [p_brand#X, p_type#X, p_size#X, supplier_cnt#X]

(39) SortExecTransformer
Input [4]: [p_brand#X, p_type#X, p_size#X, supplier_cnt#X]
Arguments: [supplier_cnt#X DESC NULLS LAST, p_brand#X ASC NULLS FIRST, p_type#X ASC NULLS FIRST, p_size#X ASC NULLS FIRST], true, 0

(40) WholeStageCodegenTransformer (X)
Input [4]: [p_brand#X, p_type#X, p_size#X, supplier_cnt#X]
Arguments: false

(41) VeloxColumnarToRow
Input [4]: [p_brand#X, p_type#X, p_size#X, supplier_cnt#X]

(42) Scan parquet
Output [2]: [ps_partkey#X, ps_suppkey#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(ps_partkey)]
ReadSchema: struct<ps_partkey:bigint,ps_suppkey:bigint>

(43) Filter
Input [2]: [ps_partkey#X, ps_suppkey#X]
Condition : isnotnull(ps_partkey#X)

(44) Scan parquet
Output [2]: [s_suppkey#X, s_comment#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(s_comment)]
ReadSchema: struct<s_suppkey:bigint,s_comment:string>

(45) Filter
Input [2]: [s_suppkey#X, s_comment#X]
Condition : (isnotnull(s_comment#X) AND s_comment#X LIKE %Customer%Complaints%)

(46) Project
Output [1]: [s_suppkey#X]
Input [2]: [s_suppkey#X, s_comment#X]

(47) BroadcastExchange
Input [1]: [s_suppkey#X]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, true]),true), [plan_id=X]

(48) BroadcastHashJoin
Left keys [1]: [ps_suppkey#X]
Right keys [1]: [s_suppkey#X]
Join type: LeftAnti
Join condition: None

(49) Scan parquet
Output [4]: [p_partkey#X, p_brand#X, p_type#X, p_size#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(p_brand), IsNotNull(p_type), Not(EqualTo(p_brand,Brand#X)), Not(StringStartsWith(p_type,MEDIUM POLISHED)), In(p_size, [14,19,23,3,36,45,49,9]), IsNotNull(p_partkey)]
ReadSchema: struct<p_partkey:bigint,p_brand:string,p_type:string,p_size:int>

(50) Filter
Input [4]: [p_partkey#X, p_brand#X, p_type#X, p_size#X]
Condition : (((((isnotnull(p_brand#X) AND isnotnull(p_type#X)) AND NOT (p_brand#X = Brand#X)) AND NOT StartsWith(p_type#X, MEDIUM POLISHED)) AND p_size#X IN (49,14,23,45,19,3,36,9)) AND isnotnull(p_partkey#X))

(51) BroadcastExchange
Input [4]: [p_partkey#X, p_brand#X, p_type#X, p_size#X]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, false]),false), [plan_id=X]

(52) BroadcastHashJoin
Left keys [1]: [ps_partkey#X]
Right keys [1]: [p_partkey#X]
Join type: Inner
Join condition: None

(53) Project
Output [4]: [ps_suppkey#X, p_brand#X, p_type#X, p_size#X]
Input [6]: [ps_partkey#X, ps_suppkey#X, p_partkey#X, p_brand#X, p_type#X, p_size#X]

(54) HashAggregate
Input [4]: [ps_suppkey#X, p_brand#X, p_type#X, p_size#X]
Keys [4]: [p_brand#X, p_type#X, p_size#X, ps_suppkey#X]
Functions: []
Aggregate Attributes: []
Results [4]: [p_brand#X, p_type#X, p_size#X, ps_suppkey#X]

(55) Exchange
Input [4]: [p_brand#X, p_type#X, p_size#X, ps_suppkey#X]
Arguments: hashpartitioning(p_brand#X, p_type#X, p_size#X, ps_suppkey#X, 1), ENSURE_REQUIREMENTS, [plan_id=X]

(56) HashAggregate
Input [4]: [p_brand#X, p_type#X, p_size#X, ps_suppkey#X]
Keys [4]: [p_brand#X, p_type#X, p_size#X, ps_suppkey#X]
Functions: []
Aggregate Attributes: []
Results [4]: [p_brand#X, p_type#X, p_size#X, ps_suppkey#X]

(57) HashAggregate
Input [4]: [p_brand#X, p_type#X, p_size#X, ps_suppkey#X]
Keys [3]: [p_brand#X, p_type#X, p_size#X]
Functions [1]: [partial_count(distinct ps_suppkey#X)]
Aggregate Attributes [1]: [count(ps_suppkey#X)#X]
Results [4]: [p_brand#X, p_type#X, p_size#X, count#X]

(58) Exchange
Input [4]: [p_brand#X, p_type#X, p_size#X, count#X]
Arguments: hashpartitioning(p_brand#X, p_type#X, p_size#X, 1), ENSURE_REQUIREMENTS, [plan_id=X]

(59) HashAggregate
Input [4]: [p_brand#X, p_type#X, p_size#X, count#X]
Keys [3]: [p_brand#X, p_type#X, p_size#X]
Functions [1]: [count(distinct ps_suppkey#X)]
Aggregate Attributes [1]: [count(ps_suppkey#X)#X]
Results [4]: [p_brand#X, p_type#X, p_size#X, count(ps_suppkey#X)#X AS supplier_cnt#X]

(60) Exchange
Input [4]: [p_brand#X, p_type#X, p_size#X, supplier_cnt#X]
Arguments: rangepartitioning(supplier_cnt#X DESC NULLS LAST, p_brand#X ASC NULLS FIRST, p_type#X ASC NULLS FIRST, p_size#X ASC NULLS FIRST, 1), ENSURE_REQUIREMENTS, [plan_id=X]

(61) Sort
Input [4]: [p_brand#X, p_type#X, p_size#X, supplier_cnt#X]
Arguments: [supplier_cnt#X DESC NULLS LAST, p_brand#X ASC NULLS FIRST, p_type#X ASC NULLS FIRST, p_size#X ASC NULLS FIRST], true, 0

(62) AdaptiveSparkPlan
Output [4]: [p_brand#X, p_type#X, p_size#X, supplier_cnt#X]
Arguments: isFinalPlan=true