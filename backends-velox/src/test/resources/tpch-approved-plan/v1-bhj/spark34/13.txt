== Physical Plan ==
AdaptiveSparkPlan (58)
+- == Final Plan ==
   VeloxColumnarToRow (42)
   +- ^ SortExecTransformer (40)
      +- ^ InputIteratorTransformer (39)
         +- VeloxResizeBatches (37)
            +- ShuffleQueryStage (36), Statistics(X)
               +- ColumnarExchange (35)
                  +- VeloxResizeBatches (34)
                     +- ^ RegularHashAggregateExecTransformer (32)
                        +- ^ InputIteratorTransformer (31)
                           +- VeloxResizeBatches (29)
                              +- ShuffleQueryStage (28), Statistics(X)
                                 +- ColumnarExchange (27)
                                    +- VeloxResizeBatches (26)
                                       +- ^ ProjectExecTransformer (24)
                                          +- ^ FlushableHashAggregateExecTransformer (23)
                                             +- ^ ProjectExecTransformer (22)
                                                +- ^ RegularHashAggregateExecTransformer (21)
                                                   +- ^ InputIteratorTransformer (20)
                                                      +- VeloxResizeBatches (18)
                                                         +- ShuffleQueryStage (17), Statistics(X)
                                                            +- ColumnarExchange (16)
                                                               +- VeloxResizeBatches (15)
                                                                  +- ^ ProjectExecTransformer (13)
                                                                     +- ^ FlushableHashAggregateExecTransformer (12)
                                                                        +- ^ ProjectExecTransformer (11)
                                                                           +- ^ BroadcastHashJoinExecTransformer LeftOuter BuildRight (10)
                                                                              :- ^ ScanTransformer parquet  (1)
                                                                              +- ^ InputIteratorTransformer (9)
                                                                                 +- BroadcastQueryStage (7), Statistics(X)
                                                                                    +- ColumnarBroadcastExchange (6)
                                                                                       +- ^ ProjectExecTransformer (4)
                                                                                          +- ^ FilterExecTransformer (3)
                                                                                             +- ^ ScanTransformer parquet  (2)
+- == Initial Plan ==
   Sort (57)
   +- Exchange (56)
      +- HashAggregate (55)
         +- Exchange (54)
            +- HashAggregate (53)
               +- HashAggregate (52)
                  +- Exchange (51)
                     +- HashAggregate (50)
                        +- Project (49)
                           +- BroadcastHashJoin LeftOuter BuildRight (48)
                              :- Scan parquet (43)
                              +- BroadcastExchange (47)
                                 +- Project (46)
                                    +- Filter (45)
                                       +- Scan parquet (44)


(1) ScanTransformer parquet 
Output [1]: [c_custkey#X]
Batched: true
Location: InMemoryFileIndex [*]
ReadSchema: struct<c_custkey:bigint>

(2) ScanTransformer parquet 
Output [3]: [o_orderkey#X, o_custkey#X, o_comment#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(o_comment), IsNotNull(o_custkey)]
ReadSchema: struct<o_orderkey:bigint,o_custkey:bigint,o_comment:string>

(3) FilterExecTransformer
Input [3]: [o_orderkey#X, o_custkey#X, o_comment#X]
Arguments: ((isnotnull(o_comment#X) AND NOT o_comment#X LIKE %special%requests%) AND isnotnull(o_custkey#X))

(4) ProjectExecTransformer
Output [2]: [o_orderkey#X, o_custkey#X]
Input [3]: [o_orderkey#X, o_custkey#X, o_comment#X]

(5) WholeStageCodegenTransformer (X)
Input [2]: [o_orderkey#X, o_custkey#X]
Arguments: false

(6) ColumnarBroadcastExchange
Input [2]: [o_orderkey#X, o_custkey#X]
Arguments: HashedRelationBroadcastMode(List(input[1, bigint, true]),false), [plan_id=X]

(7) BroadcastQueryStage
Output [2]: [o_orderkey#X, o_custkey#X]
Arguments: X

(8) InputAdapter
Input [2]: [o_orderkey#X, o_custkey#X]

(9) InputIteratorTransformer
Input [2]: [o_orderkey#X, o_custkey#X]

(10) BroadcastHashJoinExecTransformer
Left keys [1]: [c_custkey#X]
Right keys [1]: [o_custkey#X]
Join type: LeftOuter
Join condition: None

(11) ProjectExecTransformer
Output [2]: [c_custkey#X, o_orderkey#X]
Input [3]: [c_custkey#X, o_orderkey#X, o_custkey#X]

(12) FlushableHashAggregateExecTransformer
Input [2]: [c_custkey#X, o_orderkey#X]
Keys [1]: [c_custkey#X]
Functions [1]: [partial_count(o_orderkey#X)]
Aggregate Attributes [1]: [count#X]
Results [2]: [c_custkey#X, count#X]

(13) ProjectExecTransformer
Output [3]: [hash(c_custkey#X, 42) AS hash_partition_key#X, c_custkey#X, count#X]
Input [2]: [c_custkey#X, count#X]

(14) WholeStageCodegenTransformer (X)
Input [3]: [hash_partition_key#X, c_custkey#X, count#X]
Arguments: false

(15) VeloxResizeBatches
Input [3]: [hash_partition_key#X, c_custkey#X, count#X]
Arguments: X, X

(16) ColumnarExchange
Input [3]: [hash_partition_key#X, c_custkey#X, count#X]
Arguments: hashpartitioning(c_custkey#X, 1), ENSURE_REQUIREMENTS, [c_custkey#X, count#X], [plan_id=X], [shuffle_writer_type=hash]

(17) ShuffleQueryStage
Output [2]: [c_custkey#X, count#X]
Arguments: X

(18) VeloxResizeBatches
Input [2]: [c_custkey#X, count#X]
Arguments: X, X

(19) InputAdapter
Input [2]: [c_custkey#X, count#X]

(20) InputIteratorTransformer
Input [2]: [c_custkey#X, count#X]

(21) RegularHashAggregateExecTransformer
Input [2]: [c_custkey#X, count#X]
Keys [1]: [c_custkey#X]
Functions [1]: [count(o_orderkey#X)]
Aggregate Attributes [1]: [count(o_orderkey#X)#X]
Results [2]: [c_custkey#X, count(o_orderkey#X)#X]

(22) ProjectExecTransformer
Output [1]: [count(o_orderkey#X)#X AS c_count#X]
Input [2]: [c_custkey#X, count(o_orderkey#X)#X]

(23) FlushableHashAggregateExecTransformer
Input [1]: [c_count#X]
Keys [1]: [c_count#X]
Functions [1]: [partial_count(1)]
Aggregate Attributes [1]: [count#X]
Results [2]: [c_count#X, count#X]

(24) ProjectExecTransformer
Output [3]: [hash(c_count#X, 42) AS hash_partition_key#X, c_count#X, count#X]
Input [2]: [c_count#X, count#X]

(25) WholeStageCodegenTransformer (X)
Input [3]: [hash_partition_key#X, c_count#X, count#X]
Arguments: false

(26) VeloxResizeBatches
Input [3]: [hash_partition_key#X, c_count#X, count#X]
Arguments: X, X

(27) ColumnarExchange
Input [3]: [hash_partition_key#X, c_count#X, count#X]
Arguments: hashpartitioning(c_count#X, 1), ENSURE_REQUIREMENTS, [c_count#X, count#X], [plan_id=X], [shuffle_writer_type=hash]

(28) ShuffleQueryStage
Output [2]: [c_count#X, count#X]
Arguments: X

(29) VeloxResizeBatches
Input [2]: [c_count#X, count#X]
Arguments: X, X

(30) InputAdapter
Input [2]: [c_count#X, count#X]

(31) InputIteratorTransformer
Input [2]: [c_count#X, count#X]

(32) RegularHashAggregateExecTransformer
Input [2]: [c_count#X, count#X]
Keys [1]: [c_count#X]
Functions [1]: [count(1)]
Aggregate Attributes [1]: [count(1)#X]
Results [2]: [c_count#X, count(1)#X AS custdist#X]

(33) WholeStageCodegenTransformer (X)
Input [2]: [c_count#X, custdist#X]
Arguments: false

(34) VeloxResizeBatches
Input [2]: [c_count#X, custdist#X]
Arguments: X, X

(35) ColumnarExchange
Input [2]: [c_count#X, custdist#X]
Arguments: rangepartitioning(custdist#X DESC NULLS LAST, c_count#X DESC NULLS LAST, 1), ENSURE_REQUIREMENTS, [plan_id=X], [shuffle_writer_type=hash]

(36) ShuffleQueryStage
Output [2]: [c_count#X, custdist#X]
Arguments: X

(37) VeloxResizeBatches
Input [2]: [c_count#X, custdist#X]
Arguments: X, X

(38) InputAdapter
Input [2]: [c_count#X, custdist#X]

(39) InputIteratorTransformer
Input [2]: [c_count#X, custdist#X]

(40) SortExecTransformer
Input [2]: [c_count#X, custdist#X]
Arguments: [custdist#X DESC NULLS LAST, c_count#X DESC NULLS LAST], true, 0

(41) WholeStageCodegenTransformer (X)
Input [2]: [c_count#X, custdist#X]
Arguments: false

(42) VeloxColumnarToRow
Input [2]: [c_count#X, custdist#X]

(43) Scan parquet
Output [1]: [c_custkey#X]
Batched: true
Location: InMemoryFileIndex [*]
ReadSchema: struct<c_custkey:bigint>

(44) Scan parquet
Output [3]: [o_orderkey#X, o_custkey#X, o_comment#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(o_comment), IsNotNull(o_custkey)]
ReadSchema: struct<o_orderkey:bigint,o_custkey:bigint,o_comment:string>

(45) Filter
Input [3]: [o_orderkey#X, o_custkey#X, o_comment#X]
Condition : ((isnotnull(o_comment#X) AND NOT o_comment#X LIKE %special%requests%) AND isnotnull(o_custkey#X))

(46) Project
Output [2]: [o_orderkey#X, o_custkey#X]
Input [3]: [o_orderkey#X, o_custkey#X, o_comment#X]

(47) BroadcastExchange
Input [2]: [o_orderkey#X, o_custkey#X]
Arguments: HashedRelationBroadcastMode(List(input[1, bigint, true]),false), [plan_id=X]

(48) BroadcastHashJoin
Left keys [1]: [c_custkey#X]
Right keys [1]: [o_custkey#X]
Join type: LeftOuter
Join condition: None

(49) Project
Output [2]: [c_custkey#X, o_orderkey#X]
Input [3]: [c_custkey#X, o_orderkey#X, o_custkey#X]

(50) HashAggregate
Input [2]: [c_custkey#X, o_orderkey#X]
Keys [1]: [c_custkey#X]
Functions [1]: [partial_count(o_orderkey#X)]
Aggregate Attributes [1]: [count#X]
Results [2]: [c_custkey#X, count#X]

(51) Exchange
Input [2]: [c_custkey#X, count#X]
Arguments: hashpartitioning(c_custkey#X, 1), ENSURE_REQUIREMENTS, [plan_id=X]

(52) HashAggregate
Input [2]: [c_custkey#X, count#X]
Keys [1]: [c_custkey#X]
Functions [1]: [count(o_orderkey#X)]
Aggregate Attributes [1]: [count(o_orderkey#X)#X]
Results [1]: [count(o_orderkey#X)#X AS c_count#X]

(53) HashAggregate
Input [1]: [c_count#X]
Keys [1]: [c_count#X]
Functions [1]: [partial_count(1)]
Aggregate Attributes [1]: [count#X]
Results [2]: [c_count#X, count#X]

(54) Exchange
Input [2]: [c_count#X, count#X]
Arguments: hashpartitioning(c_count#X, 1), ENSURE_REQUIREMENTS, [plan_id=X]

(55) HashAggregate
Input [2]: [c_count#X, count#X]
Keys [1]: [c_count#X]
Functions [1]: [count(1)]
Aggregate Attributes [1]: [count(1)#X]
Results [2]: [c_count#X, count(1)#X AS custdist#X]

(56) Exchange
Input [2]: [c_count#X, custdist#X]
Arguments: rangepartitioning(custdist#X DESC NULLS LAST, c_count#X DESC NULLS LAST, 1), ENSURE_REQUIREMENTS, [plan_id=X]

(57) Sort
Input [2]: [c_count#X, custdist#X]
Arguments: [custdist#X DESC NULLS LAST, c_count#X DESC NULLS LAST], true, 0

(58) AdaptiveSparkPlan
Output [2]: [c_count#X, custdist#X]
Arguments: isFinalPlan=true