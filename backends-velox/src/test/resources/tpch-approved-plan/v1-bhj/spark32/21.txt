== Physical Plan ==
AdaptiveSparkPlan (94)
+- == Final Plan ==
   VeloxColumnarToRow (61)
   +- TakeOrderedAndProjectExecTransformer (60)
      +- ^ RegularHashAggregateExecTransformer (58)
         +- ^ InputIteratorTransformer (57)
            +- VeloxResizeBatches (55)
               +- ShuffleQueryStage (54)
                  +- ColumnarExchange (53)
                     +- VeloxResizeBatches (52)
                        +- ^ ProjectExecTransformer (50)
                           +- ^ FlushableHashAggregateExecTransformer (49)
                              +- ^ ProjectExecTransformer (48)
                                 +- ^ BroadcastHashJoinExecTransformer Inner BuildRight (47)
                                    :- ^ ProjectExecTransformer (38)
                                    :  +- ^ BroadcastHashJoinExecTransformer Inner BuildRight (37)
                                    :     :- ^ ProjectExecTransformer (28)
                                    :     :  +- ^ BroadcastHashJoinExecTransformer Inner BuildLeft (27)
                                    :     :     :- ^ InputIteratorTransformer (7)
                                    :     :     :  +- BroadcastQueryStage (5)
                                    :     :     :     +- ColumnarBroadcastExchange (4)
                                    :     :     :        +- ^ FilterExecTransformer (2)
                                    :     :     :           +- ^ ScanTransformer parquet  (1)
                                    :     :     +- ^ BroadcastHashJoinExecTransformer LeftAnti BuildRight (26)
                                    :     :        :- ^ BroadcastHashJoinExecTransformer LeftSemi BuildRight (17)
                                    :     :        :  :- ^ ProjectExecTransformer (10)
                                    :     :        :  :  +- ^ FilterExecTransformer (9)
                                    :     :        :  :     +- ^ ScanTransformer parquet  (8)
                                    :     :        :  +- ^ InputIteratorTransformer (16)
                                    :     :        :     +- BroadcastQueryStage (14)
                                    :     :        :        +- ColumnarBroadcastExchange (13)
                                    :     :        :           +- ^ ScanTransformer parquet  (11)
                                    :     :        +- ^ InputIteratorTransformer (25)
                                    :     :           +- BroadcastQueryStage (23)
                                    :     :              +- ColumnarBroadcastExchange (22)
                                    :     :                 +- ^ ProjectExecTransformer (20)
                                    :     :                    +- ^ FilterExecTransformer (19)
                                    :     :                       +- ^ ScanTransformer parquet  (18)
                                    :     +- ^ InputIteratorTransformer (36)
                                    :        +- BroadcastQueryStage (34)
                                    :           +- ColumnarBroadcastExchange (33)
                                    :              +- ^ ProjectExecTransformer (31)
                                    :                 +- ^ FilterExecTransformer (30)
                                    :                    +- ^ ScanTransformer parquet  (29)
                                    +- ^ InputIteratorTransformer (46)
                                       +- BroadcastQueryStage (44)
                                          +- ColumnarBroadcastExchange (43)
                                             +- ^ ProjectExecTransformer (41)
                                                +- ^ FilterExecTransformer (40)
                                                   +- ^ ScanTransformer parquet  (39)
+- == Initial Plan ==
   TakeOrderedAndProject (93)
   +- HashAggregate (92)
      +- Exchange (91)
         +- HashAggregate (90)
            +- Project (89)
               +- BroadcastHashJoin Inner BuildRight (88)
                  :- Project (83)
                  :  +- BroadcastHashJoin Inner BuildRight (82)
                  :     :- Project (77)
                  :     :  +- BroadcastHashJoin Inner BuildLeft (76)
                  :     :     :- BroadcastExchange (64)
                  :     :     :  +- Filter (63)
                  :     :     :     +- Scan parquet (62)
                  :     :     +- BroadcastHashJoin LeftAnti BuildRight (75)
                  :     :        :- BroadcastHashJoin LeftSemi BuildRight (70)
                  :     :        :  :- Project (67)
                  :     :        :  :  +- Filter (66)
                  :     :        :  :     +- Scan parquet (65)
                  :     :        :  +- BroadcastExchange (69)
                  :     :        :     +- Scan parquet (68)
                  :     :        +- BroadcastExchange (74)
                  :     :           +- Project (73)
                  :     :              +- Filter (72)
                  :     :                 +- Scan parquet (71)
                  :     +- BroadcastExchange (81)
                  :        +- Project (80)
                  :           +- Filter (79)
                  :              +- Scan parquet (78)
                  +- BroadcastExchange (87)
                     +- Project (86)
                        +- Filter (85)
                           +- Scan parquet (84)


(1) ScanTransformer parquet 
Output [3]: [s_suppkey#X, s_name#X, s_nationkey#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(s_suppkey), IsNotNull(s_nationkey)]
ReadSchema: struct<s_suppkey:bigint,s_name:string,s_nationkey:bigint>

(2) FilterExecTransformer
Input [3]: [s_suppkey#X, s_name#X, s_nationkey#X]
Arguments: (isnotnull(s_suppkey#X) AND isnotnull(s_nationkey#X))

(3) WholeStageCodegenTransformer (X)
Input [3]: [s_suppkey#X, s_name#X, s_nationkey#X]
Arguments: false

(4) ColumnarBroadcastExchange
Input [3]: [s_suppkey#X, s_name#X, s_nationkey#X]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, false]),false), [plan_id=X]

(5) BroadcastQueryStage
Output [3]: [s_suppkey#X, s_name#X, s_nationkey#X]
Arguments: X

(6) InputAdapter
Input [3]: [s_suppkey#X, s_name#X, s_nationkey#X]

(7) InputIteratorTransformer
Input [3]: [s_suppkey#X, s_name#X, s_nationkey#X]

(8) ScanTransformer parquet 
Output [4]: [l_orderkey#X, l_suppkey#X, l_commitdate#X, l_receiptdate#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(l_receiptdate), IsNotNull(l_commitdate), IsNotNull(l_suppkey), IsNotNull(l_orderkey)]
ReadSchema: struct<l_orderkey:bigint,l_suppkey:bigint,l_commitdate:date,l_receiptdate:date>

(9) FilterExecTransformer
Input [4]: [l_orderkey#X, l_suppkey#X, l_commitdate#X, l_receiptdate#X]
Arguments: ((((isnotnull(l_receiptdate#X) AND isnotnull(l_commitdate#X)) AND (l_receiptdate#X > l_commitdate#X)) AND isnotnull(l_suppkey#X)) AND isnotnull(l_orderkey#X))

(10) ProjectExecTransformer
Output [2]: [l_orderkey#X, l_suppkey#X]
Input [4]: [l_orderkey#X, l_suppkey#X, l_commitdate#X, l_receiptdate#X]

(11) ScanTransformer parquet 
Output [2]: [l_orderkey#X, l_suppkey#X]
Batched: true
Location: InMemoryFileIndex [*]
ReadSchema: struct<l_orderkey:bigint,l_suppkey:bigint>

(12) WholeStageCodegenTransformer (X)
Input [2]: [l_orderkey#X, l_suppkey#X]
Arguments: false

(13) ColumnarBroadcastExchange
Input [2]: [l_orderkey#X, l_suppkey#X]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [plan_id=X]

(14) BroadcastQueryStage
Output [2]: [l_orderkey#X, l_suppkey#X]
Arguments: X

(15) InputAdapter
Input [2]: [l_orderkey#X, l_suppkey#X]

(16) InputIteratorTransformer
Input [2]: [l_orderkey#X, l_suppkey#X]

(17) BroadcastHashJoinExecTransformer
Left keys [1]: [l_orderkey#X]
Right keys [1]: [l_orderkey#X]
Join condition: NOT (l_suppkey#X = l_suppkey#X)

(18) ScanTransformer parquet 
Output [4]: [l_orderkey#X, l_suppkey#X, l_commitdate#X, l_receiptdate#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(l_receiptdate), IsNotNull(l_commitdate)]
ReadSchema: struct<l_orderkey:bigint,l_suppkey:bigint,l_commitdate:date,l_receiptdate:date>

(19) FilterExecTransformer
Input [4]: [l_orderkey#X, l_suppkey#X, l_commitdate#X, l_receiptdate#X]
Arguments: ((isnotnull(l_receiptdate#X) AND isnotnull(l_commitdate#X)) AND (l_receiptdate#X > l_commitdate#X))

(20) ProjectExecTransformer
Output [2]: [l_orderkey#X, l_suppkey#X]
Input [4]: [l_orderkey#X, l_suppkey#X, l_commitdate#X, l_receiptdate#X]

(21) WholeStageCodegenTransformer (X)
Input [2]: [l_orderkey#X, l_suppkey#X]
Arguments: false

(22) ColumnarBroadcastExchange
Input [2]: [l_orderkey#X, l_suppkey#X]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [plan_id=X]

(23) BroadcastQueryStage
Output [2]: [l_orderkey#X, l_suppkey#X]
Arguments: X

(24) InputAdapter
Input [2]: [l_orderkey#X, l_suppkey#X]

(25) InputIteratorTransformer
Input [2]: [l_orderkey#X, l_suppkey#X]

(26) BroadcastHashJoinExecTransformer
Left keys [1]: [l_orderkey#X]
Right keys [1]: [l_orderkey#X]
Join condition: NOT (l_suppkey#X = l_suppkey#X)

(27) BroadcastHashJoinExecTransformer
Left keys [1]: [s_suppkey#X]
Right keys [1]: [l_suppkey#X]
Join condition: None

(28) ProjectExecTransformer
Output [3]: [s_name#X, s_nationkey#X, l_orderkey#X]
Input [5]: [s_suppkey#X, s_name#X, s_nationkey#X, l_orderkey#X, l_suppkey#X]

(29) ScanTransformer parquet 
Output [2]: [o_orderkey#X, o_orderstatus#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(o_orderstatus), EqualTo(o_orderstatus,F), IsNotNull(o_orderkey)]
ReadSchema: struct<o_orderkey:bigint,o_orderstatus:string>

(30) FilterExecTransformer
Input [2]: [o_orderkey#X, o_orderstatus#X]
Arguments: ((isnotnull(o_orderstatus#X) AND (o_orderstatus#X = F)) AND isnotnull(o_orderkey#X))

(31) ProjectExecTransformer
Output [1]: [o_orderkey#X]
Input [2]: [o_orderkey#X, o_orderstatus#X]

(32) WholeStageCodegenTransformer (X)
Input [1]: [o_orderkey#X]
Arguments: false

(33) ColumnarBroadcastExchange
Input [1]: [o_orderkey#X]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [plan_id=X]

(34) BroadcastQueryStage
Output [1]: [o_orderkey#X]
Arguments: X

(35) InputAdapter
Input [1]: [o_orderkey#X]

(36) InputIteratorTransformer
Input [1]: [o_orderkey#X]

(37) BroadcastHashJoinExecTransformer
Left keys [1]: [l_orderkey#X]
Right keys [1]: [o_orderkey#X]
Join condition: None

(38) ProjectExecTransformer
Output [2]: [s_name#X, s_nationkey#X]
Input [4]: [s_name#X, s_nationkey#X, l_orderkey#X, o_orderkey#X]

(39) ScanTransformer parquet 
Output [2]: [n_nationkey#X, n_name#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(n_name), EqualTo(n_name,SAUDI ARABIA), IsNotNull(n_nationkey)]
ReadSchema: struct<n_nationkey:bigint,n_name:string>

(40) FilterExecTransformer
Input [2]: [n_nationkey#X, n_name#X]
Arguments: ((isnotnull(n_name#X) AND (n_name#X = SAUDI ARABIA)) AND isnotnull(n_nationkey#X))

(41) ProjectExecTransformer
Output [1]: [n_nationkey#X]
Input [2]: [n_nationkey#X, n_name#X]

(42) WholeStageCodegenTransformer (X)
Input [1]: [n_nationkey#X]
Arguments: false

(43) ColumnarBroadcastExchange
Input [1]: [n_nationkey#X]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [plan_id=X]

(44) BroadcastQueryStage
Output [1]: [n_nationkey#X]
Arguments: X

(45) InputAdapter
Input [1]: [n_nationkey#X]

(46) InputIteratorTransformer
Input [1]: [n_nationkey#X]

(47) BroadcastHashJoinExecTransformer
Left keys [1]: [s_nationkey#X]
Right keys [1]: [n_nationkey#X]
Join condition: None

(48) ProjectExecTransformer
Output [1]: [s_name#X]
Input [3]: [s_name#X, s_nationkey#X, n_nationkey#X]

(49) FlushableHashAggregateExecTransformer
Input [1]: [s_name#X]
Keys [1]: [s_name#X]
Functions [1]: [partial_count(1)]
Aggregate Attributes [1]: [count#X]
Results [2]: [s_name#X, count#X]

(50) ProjectExecTransformer
Output [3]: [hash(s_name#X, 42) AS hash_partition_key#X, s_name#X, count#X]
Input [2]: [s_name#X, count#X]

(51) WholeStageCodegenTransformer (X)
Input [3]: [hash_partition_key#X, s_name#X, count#X]
Arguments: false

(52) VeloxResizeBatches
Input [3]: [hash_partition_key#X, s_name#X, count#X]
Arguments: X, X

(53) ColumnarExchange
Input [3]: [hash_partition_key#X, s_name#X, count#X]
Arguments: hashpartitioning(s_name#X, 1), ENSURE_REQUIREMENTS, [s_name#X, count#X], [plan_id=X], [shuffle_writer_type=hash]

(54) ShuffleQueryStage
Output [2]: [s_name#X, count#X]
Arguments: X

(55) VeloxResizeBatches
Input [2]: [s_name#X, count#X]
Arguments: X, X

(56) InputAdapter
Input [2]: [s_name#X, count#X]

(57) InputIteratorTransformer
Input [2]: [s_name#X, count#X]

(58) RegularHashAggregateExecTransformer
Input [2]: [s_name#X, count#X]
Keys [1]: [s_name#X]
Functions [1]: [count(1)]
Aggregate Attributes [1]: [count(1)#X]
Results [2]: [s_name#X, count(1)#X AS numwait#X]

(59) WholeStageCodegenTransformer (X)
Input [2]: [s_name#X, numwait#X]
Arguments: false

(60) TakeOrderedAndProjectExecTransformer
Input [2]: [s_name#X, numwait#X]
Arguments: X, [numwait#X DESC NULLS LAST, s_name#X ASC NULLS FIRST], [s_name#X, numwait#X], 0

(61) VeloxColumnarToRow
Input [2]: [s_name#X, numwait#X]

(62) Scan parquet
Output [3]: [s_suppkey#X, s_name#X, s_nationkey#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(s_suppkey), IsNotNull(s_nationkey)]
ReadSchema: struct<s_suppkey:bigint,s_name:string,s_nationkey:bigint>

(63) Filter
Input [3]: [s_suppkey#X, s_name#X, s_nationkey#X]
Condition : (isnotnull(s_suppkey#X) AND isnotnull(s_nationkey#X))

(64) BroadcastExchange
Input [3]: [s_suppkey#X, s_name#X, s_nationkey#X]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, false]),false), [plan_id=X]

(65) Scan parquet
Output [4]: [l_orderkey#X, l_suppkey#X, l_commitdate#X, l_receiptdate#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(l_receiptdate), IsNotNull(l_commitdate), IsNotNull(l_suppkey), IsNotNull(l_orderkey)]
ReadSchema: struct<l_orderkey:bigint,l_suppkey:bigint,l_commitdate:date,l_receiptdate:date>

(66) Filter
Input [4]: [l_orderkey#X, l_suppkey#X, l_commitdate#X, l_receiptdate#X]
Condition : ((((isnotnull(l_receiptdate#X) AND isnotnull(l_commitdate#X)) AND (l_receiptdate#X > l_commitdate#X)) AND isnotnull(l_suppkey#X)) AND isnotnull(l_orderkey#X))

(67) Project
Output [2]: [l_orderkey#X, l_suppkey#X]
Input [4]: [l_orderkey#X, l_suppkey#X, l_commitdate#X, l_receiptdate#X]

(68) Scan parquet
Output [2]: [l_orderkey#X, l_suppkey#X]
Batched: true
Location: InMemoryFileIndex [*]
ReadSchema: struct<l_orderkey:bigint,l_suppkey:bigint>

(69) BroadcastExchange
Input [2]: [l_orderkey#X, l_suppkey#X]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [plan_id=X]

(70) BroadcastHashJoin
Left keys [1]: [l_orderkey#X]
Right keys [1]: [l_orderkey#X]
Join condition: NOT (l_suppkey#X = l_suppkey#X)

(71) Scan parquet
Output [4]: [l_orderkey#X, l_suppkey#X, l_commitdate#X, l_receiptdate#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(l_receiptdate), IsNotNull(l_commitdate)]
ReadSchema: struct<l_orderkey:bigint,l_suppkey:bigint,l_commitdate:date,l_receiptdate:date>

(72) Filter
Input [4]: [l_orderkey#X, l_suppkey#X, l_commitdate#X, l_receiptdate#X]
Condition : ((isnotnull(l_receiptdate#X) AND isnotnull(l_commitdate#X)) AND (l_receiptdate#X > l_commitdate#X))

(73) Project
Output [2]: [l_orderkey#X, l_suppkey#X]
Input [4]: [l_orderkey#X, l_suppkey#X, l_commitdate#X, l_receiptdate#X]

(74) BroadcastExchange
Input [2]: [l_orderkey#X, l_suppkey#X]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [plan_id=X]

(75) BroadcastHashJoin
Left keys [1]: [l_orderkey#X]
Right keys [1]: [l_orderkey#X]
Join condition: NOT (l_suppkey#X = l_suppkey#X)

(76) BroadcastHashJoin
Left keys [1]: [s_suppkey#X]
Right keys [1]: [l_suppkey#X]
Join condition: None

(77) Project
Output [3]: [s_name#X, s_nationkey#X, l_orderkey#X]
Input [5]: [s_suppkey#X, s_name#X, s_nationkey#X, l_orderkey#X, l_suppkey#X]

(78) Scan parquet
Output [2]: [o_orderkey#X, o_orderstatus#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(o_orderstatus), EqualTo(o_orderstatus,F), IsNotNull(o_orderkey)]
ReadSchema: struct<o_orderkey:bigint,o_orderstatus:string>

(79) Filter
Input [2]: [o_orderkey#X, o_orderstatus#X]
Condition : ((isnotnull(o_orderstatus#X) AND (o_orderstatus#X = F)) AND isnotnull(o_orderkey#X))

(80) Project
Output [1]: [o_orderkey#X]
Input [2]: [o_orderkey#X, o_orderstatus#X]

(81) BroadcastExchange
Input [1]: [o_orderkey#X]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [plan_id=X]

(82) BroadcastHashJoin
Left keys [1]: [l_orderkey#X]
Right keys [1]: [o_orderkey#X]
Join condition: None

(83) Project
Output [2]: [s_name#X, s_nationkey#X]
Input [4]: [s_name#X, s_nationkey#X, l_orderkey#X, o_orderkey#X]

(84) Scan parquet
Output [2]: [n_nationkey#X, n_name#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(n_name), EqualTo(n_name,SAUDI ARABIA), IsNotNull(n_nationkey)]
ReadSchema: struct<n_nationkey:bigint,n_name:string>

(85) Filter
Input [2]: [n_nationkey#X, n_name#X]
Condition : ((isnotnull(n_name#X) AND (n_name#X = SAUDI ARABIA)) AND isnotnull(n_nationkey#X))

(86) Project
Output [1]: [n_nationkey#X]
Input [2]: [n_nationkey#X, n_name#X]

(87) BroadcastExchange
Input [1]: [n_nationkey#X]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [plan_id=X]

(88) BroadcastHashJoin
Left keys [1]: [s_nationkey#X]
Right keys [1]: [n_nationkey#X]
Join condition: None

(89) Project
Output [1]: [s_name#X]
Input [3]: [s_name#X, s_nationkey#X, n_nationkey#X]

(90) HashAggregate
Input [1]: [s_name#X]
Keys [1]: [s_name#X]
Functions [1]: [partial_count(1)]
Aggregate Attributes [1]: [count#X]
Results [2]: [s_name#X, count#X]

(91) Exchange
Input [2]: [s_name#X, count#X]
Arguments: hashpartitioning(s_name#X, 1), ENSURE_REQUIREMENTS, [plan_id=X]

(92) HashAggregate
Input [2]: [s_name#X, count#X]
Keys [1]: [s_name#X]
Functions [1]: [count(1)]
Aggregate Attributes [1]: [count(1)#X]
Results [2]: [s_name#X, count(1)#X AS numwait#X]

(93) TakeOrderedAndProject
Input [2]: [s_name#X, numwait#X]
Arguments: X, [numwait#X DESC NULLS LAST, s_name#X ASC NULLS FIRST], [s_name#X, numwait#X]

(94) AdaptiveSparkPlan
Output [2]: [s_name#X, numwait#X]
Arguments: isFinalPlan=true