== Physical Plan ==
AdaptiveSparkPlan (56)
+- == Final Plan ==
   VeloxColumnarToRow (41)
   +- ^ SortExecTransformer (39)
      +- ^ InputIteratorTransformer (38)
         +- VeloxResizeBatches (36)
            +- ShuffleQueryStage (35), Statistics(X)
               +- ColumnarExchange (34)
                  +- VeloxResizeBatches (33)
                     +- ^ RegularHashAggregateExecTransformer (31)
                        +- ^ InputIteratorTransformer (30)
                           +- VeloxResizeBatches (28)
                              +- ShuffleQueryStage (27), Statistics(X)
                                 +- ColumnarExchange (26)
                                    +- VeloxResizeBatches (25)
                                       +- ^ ProjectExecTransformer (23)
                                          +- ^ FlushableHashAggregateExecTransformer (22)
                                             +- ^ ProjectExecTransformer (21)
                                                +- ^ ShuffledHashJoinExecTransformer LeftAnti BuildRight (20)
                                                   :- ^ InputIteratorTransformer (10)
                                                   :  +- VeloxResizeBatches (8)
                                                   :     +- ShuffleQueryStage (7), Statistics(X)
                                                   :        +- ColumnarExchange (6)
                                                   :           +- VeloxResizeBatches (5)
                                                   :              +- ^ ProjectExecTransformer (3)
                                                   :                 +- ^ FilterExecTransformer (2)
                                                   :                    +- ^ ScanTransformer parquet  (1)
                                                   +- ^ InputIteratorTransformer (19)
                                                      +- VeloxResizeBatches (17)
                                                         +- ShuffleQueryStage (16), Statistics(X)
                                                            +- ColumnarExchange (15)
                                                               +- VeloxResizeBatches (14)
                                                                  +- ^ ProjectExecTransformer (12)
                                                                     +- ^ ScanTransformer parquet  (11)
+- == Initial Plan ==
   Sort (55)
   +- Exchange (54)
      +- HashAggregate (53)
         +- Exchange (52)
            +- HashAggregate (51)
               +- Project (50)
                  +- SortMergeJoin LeftAnti (49)
                     :- Sort (45)
                     :  +- Exchange (44)
                     :     +- Filter (43)
                     :        +- Scan parquet (42)
                     +- Sort (48)
                        +- Exchange (47)
                           +- Scan parquet (46)


(1) ScanTransformer parquet 
Output [3]: [c_custkey#X, c_phone#X, c_acctbal#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(c_acctbal)]
ReadSchema: struct<c_custkey:bigint,c_phone:string,c_acctbal:decimal(12,2)>

(2) FilterExecTransformer
Input [3]: [c_custkey#X, c_phone#X, c_acctbal#X]
Arguments: ((isnotnull(c_acctbal#X) AND substring(c_phone#X, 1, 2) IN (13,31,23,29,30,18,17)) AND (cast(c_acctbal#X as decimal(16,6)) > Subquery subquery#X, [id=#X]))

(3) ProjectExecTransformer
Output [4]: [hash(c_custkey#X, 42) AS hash_partition_key#X, c_custkey#X, c_phone#X, c_acctbal#X]
Input [3]: [c_custkey#X, c_phone#X, c_acctbal#X]

(4) WholeStageCodegenTransformer (X)
Input [4]: [hash_partition_key#X, c_custkey#X, c_phone#X, c_acctbal#X]
Arguments: false

(5) VeloxResizeBatches
Input [4]: [hash_partition_key#X, c_custkey#X, c_phone#X, c_acctbal#X]
Arguments: X, X

(6) ColumnarExchange
Input [4]: [hash_partition_key#X, c_custkey#X, c_phone#X, c_acctbal#X]
Arguments: hashpartitioning(c_custkey#X, 1), ENSURE_REQUIREMENTS, [c_custkey#X, c_phone#X, c_acctbal#X], [plan_id=X], [shuffle_writer_type=hash]

(7) ShuffleQueryStage
Output [3]: [c_custkey#X, c_phone#X, c_acctbal#X]
Arguments: X

(8) VeloxResizeBatches
Input [3]: [c_custkey#X, c_phone#X, c_acctbal#X]
Arguments: X, X

(9) InputAdapter
Input [3]: [c_custkey#X, c_phone#X, c_acctbal#X]

(10) InputIteratorTransformer
Input [3]: [c_custkey#X, c_phone#X, c_acctbal#X]

(11) ScanTransformer parquet 
Output [1]: [o_custkey#X]
Batched: true
Location: InMemoryFileIndex [*]
ReadSchema: struct<o_custkey:bigint>

(12) ProjectExecTransformer
Output [2]: [hash(o_custkey#X, 42) AS hash_partition_key#X, o_custkey#X]
Input [1]: [o_custkey#X]

(13) WholeStageCodegenTransformer (X)
Input [2]: [hash_partition_key#X, o_custkey#X]
Arguments: false

(14) VeloxResizeBatches
Input [2]: [hash_partition_key#X, o_custkey#X]
Arguments: X, X

(15) ColumnarExchange
Input [2]: [hash_partition_key#X, o_custkey#X]
Arguments: hashpartitioning(o_custkey#X, 1), ENSURE_REQUIREMENTS, [o_custkey#X], [plan_id=X], [shuffle_writer_type=hash]

(16) ShuffleQueryStage
Output [1]: [o_custkey#X]
Arguments: X

(17) VeloxResizeBatches
Input [1]: [o_custkey#X]
Arguments: X, X

(18) InputAdapter
Input [1]: [o_custkey#X]

(19) InputIteratorTransformer
Input [1]: [o_custkey#X]

(20) ShuffledHashJoinExecTransformer
Left keys [1]: [c_custkey#X]
Right keys [1]: [o_custkey#X]
Join type: LeftAnti
Join condition: None

(21) ProjectExecTransformer
Output [2]: [substring(c_phone#X, 1, 2) AS cntrycode#X, c_acctbal#X]
Input [3]: [c_custkey#X, c_phone#X, c_acctbal#X]

(22) FlushableHashAggregateExecTransformer
Input [2]: [cntrycode#X, c_acctbal#X]
Keys [1]: [cntrycode#X]
Functions [2]: [partial_count(1), partial_sum(c_acctbal#X)]
Aggregate Attributes [3]: [count#X, sum#X, isEmpty#X]
Results [4]: [cntrycode#X, count#X, sum#X, isEmpty#X]

(23) ProjectExecTransformer
Output [5]: [hash(cntrycode#X, 42) AS hash_partition_key#X, cntrycode#X, count#X, sum#X, isEmpty#X]
Input [4]: [cntrycode#X, count#X, sum#X, isEmpty#X]

(24) WholeStageCodegenTransformer (X)
Input [5]: [hash_partition_key#X, cntrycode#X, count#X, sum#X, isEmpty#X]
Arguments: false

(25) VeloxResizeBatches
Input [5]: [hash_partition_key#X, cntrycode#X, count#X, sum#X, isEmpty#X]
Arguments: X, X

(26) ColumnarExchange
Input [5]: [hash_partition_key#X, cntrycode#X, count#X, sum#X, isEmpty#X]
Arguments: hashpartitioning(cntrycode#X, 1), ENSURE_REQUIREMENTS, [cntrycode#X, count#X, sum#X, isEmpty#X], [plan_id=X], [shuffle_writer_type=hash]

(27) ShuffleQueryStage
Output [4]: [cntrycode#X, count#X, sum#X, isEmpty#X]
Arguments: X

(28) VeloxResizeBatches
Input [4]: [cntrycode#X, count#X, sum#X, isEmpty#X]
Arguments: X, X

(29) InputAdapter
Input [4]: [cntrycode#X, count#X, sum#X, isEmpty#X]

(30) InputIteratorTransformer
Input [4]: [cntrycode#X, count#X, sum#X, isEmpty#X]

(31) RegularHashAggregateExecTransformer
Input [4]: [cntrycode#X, count#X, sum#X, isEmpty#X]
Keys [1]: [cntrycode#X]
Functions [2]: [count(1), sum(c_acctbal#X)]
Aggregate Attributes [2]: [count(1)#X, sum(c_acctbal#X)#X]
Results [3]: [cntrycode#X, count(1)#X AS numcust#X, sum(c_acctbal#X)#X AS totacctbal#X]

(32) WholeStageCodegenTransformer (X)
Input [3]: [cntrycode#X, numcust#X, totacctbal#X]
Arguments: false

(33) VeloxResizeBatches
Input [3]: [cntrycode#X, numcust#X, totacctbal#X]
Arguments: X, X

(34) ColumnarExchange
Input [3]: [cntrycode#X, numcust#X, totacctbal#X]
Arguments: rangepartitioning(cntrycode#X ASC NULLS FIRST, 1), ENSURE_REQUIREMENTS, [plan_id=X], [shuffle_writer_type=hash]

(35) ShuffleQueryStage
Output [3]: [cntrycode#X, numcust#X, totacctbal#X]
Arguments: X

(36) VeloxResizeBatches
Input [3]: [cntrycode#X, numcust#X, totacctbal#X]
Arguments: X, X

(37) InputAdapter
Input [3]: [cntrycode#X, numcust#X, totacctbal#X]

(38) InputIteratorTransformer
Input [3]: [cntrycode#X, numcust#X, totacctbal#X]

(39) SortExecTransformer
Input [3]: [cntrycode#X, numcust#X, totacctbal#X]
Arguments: [cntrycode#X ASC NULLS FIRST], true, 0

(40) WholeStageCodegenTransformer (X)
Input [3]: [cntrycode#X, numcust#X, totacctbal#X]
Arguments: false

(41) VeloxColumnarToRow
Input [3]: [cntrycode#X, numcust#X, totacctbal#X]

(42) Scan parquet
Output [3]: [c_custkey#X, c_phone#X, c_acctbal#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(c_acctbal)]
ReadSchema: struct<c_custkey:bigint,c_phone:string,c_acctbal:decimal(12,2)>

(43) Filter
Input [3]: [c_custkey#X, c_phone#X, c_acctbal#X]
Condition : ((isnotnull(c_acctbal#X) AND substring(c_phone#X, 1, 2) IN (13,31,23,29,30,18,17)) AND (cast(c_acctbal#X as decimal(16,6)) > Subquery subquery#X, [id=#X]))

(44) Exchange
Input [3]: [c_custkey#X, c_phone#X, c_acctbal#X]
Arguments: hashpartitioning(c_custkey#X, 1), ENSURE_REQUIREMENTS, [plan_id=X]

(45) Sort
Input [3]: [c_custkey#X, c_phone#X, c_acctbal#X]
Arguments: [c_custkey#X ASC NULLS FIRST], false, 0

(46) Scan parquet
Output [1]: [o_custkey#X]
Batched: true
Location: InMemoryFileIndex [*]
ReadSchema: struct<o_custkey:bigint>

(47) Exchange
Input [1]: [o_custkey#X]
Arguments: hashpartitioning(o_custkey#X, 1), ENSURE_REQUIREMENTS, [plan_id=X]

(48) Sort
Input [1]: [o_custkey#X]
Arguments: [o_custkey#X ASC NULLS FIRST], false, 0

(49) SortMergeJoin
Left keys [1]: [c_custkey#X]
Right keys [1]: [o_custkey#X]
Join type: LeftAnti
Join condition: None

(50) Project
Output [2]: [substring(c_phone#X, 1, 2) AS cntrycode#X, c_acctbal#X]
Input [3]: [c_custkey#X, c_phone#X, c_acctbal#X]

(51) HashAggregate
Input [2]: [cntrycode#X, c_acctbal#X]
Keys [1]: [cntrycode#X]
Functions [2]: [partial_count(1), partial_sum(c_acctbal#X)]
Aggregate Attributes [3]: [count#X, sum#X, isEmpty#X]
Results [4]: [cntrycode#X, count#X, sum#X, isEmpty#X]

(52) Exchange
Input [4]: [cntrycode#X, count#X, sum#X, isEmpty#X]
Arguments: hashpartitioning(cntrycode#X, 1), ENSURE_REQUIREMENTS, [plan_id=X]

(53) HashAggregate
Input [4]: [cntrycode#X, count#X, sum#X, isEmpty#X]
Keys [1]: [cntrycode#X]
Functions [2]: [count(1), sum(c_acctbal#X)]
Aggregate Attributes [2]: [count(1)#X, sum(c_acctbal#X)#X]
Results [3]: [cntrycode#X, count(1)#X AS numcust#X, sum(c_acctbal#X)#X AS totacctbal#X]

(54) Exchange
Input [3]: [cntrycode#X, numcust#X, totacctbal#X]
Arguments: rangepartitioning(cntrycode#X ASC NULLS FIRST, 1), ENSURE_REQUIREMENTS, [plan_id=X]

(55) Sort
Input [3]: [cntrycode#X, numcust#X, totacctbal#X]
Arguments: [cntrycode#X ASC NULLS FIRST], true, 0

(56) AdaptiveSparkPlan
Output [3]: [cntrycode#X, numcust#X, totacctbal#X]
Arguments: isFinalPlan=true

===== Subqueries =====

Subquery:1 Hosting operator id = 2 Hosting Expression = Subquery subquery#X, [id=#X]
AdaptiveSparkPlan (77)
+- == Final Plan ==
   VeloxColumnarToRow (70)
   +- ^ RegularHashAggregateExecTransformer (68)
      +- ^ InputIteratorTransformer (67)
         +- VeloxResizeBatches (65)
            +- ShuffleQueryStage (64), Statistics(X)
               +- ColumnarExchange (63)
                  +- VeloxResizeBatches (62)
                     +- ^ FlushableHashAggregateExecTransformer (60)
                        +- ^ ProjectExecTransformer (59)
                           +- ^ FilterExecTransformer (58)
                              +- ^ ScanTransformer parquet  (57)
+- == Initial Plan ==
   HashAggregate (76)
   +- Exchange (75)
      +- HashAggregate (74)
         +- Project (73)
            +- Filter (72)
               +- Scan parquet (71)


(57) ScanTransformer parquet 
Output [2]: [c_phone#X, c_acctbal#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(c_acctbal), GreaterThan(c_acctbal,0.00)]
ReadSchema: struct<c_phone:string,c_acctbal:decimal(12,2)>

(58) FilterExecTransformer
Input [2]: [c_phone#X, c_acctbal#X]
Arguments: ((isnotnull(c_acctbal#X) AND (c_acctbal#X > 0.00)) AND substring(c_phone#X, 1, 2) IN (13,31,23,29,30,18,17))

(59) ProjectExecTransformer
Output [1]: [c_acctbal#X]
Input [2]: [c_phone#X, c_acctbal#X]

(60) FlushableHashAggregateExecTransformer
Input [1]: [c_acctbal#X]
Keys: []
Functions [1]: [partial_avg(c_acctbal#X)]
Aggregate Attributes [2]: [sum#X, count#X]
Results [2]: [sum#X, count#X]

(61) WholeStageCodegenTransformer (X)
Input [2]: [sum#X, count#X]
Arguments: false

(62) VeloxResizeBatches
Input [2]: [sum#X, count#X]
Arguments: X, X

(63) ColumnarExchange
Input [2]: [sum#X, count#X]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=X], [shuffle_writer_type=hash]

(64) ShuffleQueryStage
Output [2]: [sum#X, count#X]
Arguments: X

(65) VeloxResizeBatches
Input [2]: [sum#X, count#X]
Arguments: X, X

(66) InputAdapter
Input [2]: [sum#X, count#X]

(67) InputIteratorTransformer
Input [2]: [sum#X, count#X]

(68) RegularHashAggregateExecTransformer
Input [2]: [sum#X, count#X]
Keys: []
Functions [1]: [avg(c_acctbal#X)]
Aggregate Attributes [1]: [avg(c_acctbal#X)#X]
Results [1]: [avg(c_acctbal#X)#X AS avg(c_acctbal)#X]

(69) WholeStageCodegenTransformer (X)
Input [1]: [avg(c_acctbal)#X]
Arguments: false

(70) VeloxColumnarToRow
Input [1]: [avg(c_acctbal)#X]

(71) Scan parquet
Output [2]: [c_phone#X, c_acctbal#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(c_acctbal), GreaterThan(c_acctbal,0.00)]
ReadSchema: struct<c_phone:string,c_acctbal:decimal(12,2)>

(72) Filter
Input [2]: [c_phone#X, c_acctbal#X]
Condition : ((isnotnull(c_acctbal#X) AND (c_acctbal#X > 0.00)) AND substring(c_phone#X, 1, 2) IN (13,31,23,29,30,18,17))

(73) Project
Output [1]: [c_acctbal#X]
Input [2]: [c_phone#X, c_acctbal#X]

(74) HashAggregate
Input [1]: [c_acctbal#X]
Keys: []
Functions [1]: [partial_avg(c_acctbal#X)]
Aggregate Attributes [2]: [sum#X, count#X]
Results [2]: [sum#X, count#X]

(75) Exchange
Input [2]: [sum#X, count#X]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=X]

(76) HashAggregate
Input [2]: [sum#X, count#X]
Keys: []
Functions [1]: [avg(c_acctbal#X)]
Aggregate Attributes [1]: [avg(c_acctbal#X)#X]
Results [1]: [avg(c_acctbal#X)#X AS avg(c_acctbal)#X]

(77) AdaptiveSparkPlan
Output [1]: [avg(c_acctbal)#X]
Arguments: isFinalPlan=true

Subquery:2 Hosting operator id = 1 Hosting Expression = Subquery subquery#X, [id=#X]
AdaptiveSparkPlan (77)
+- == Final Plan ==
   VeloxColumnarToRow (70)
   +- ^ RegularHashAggregateExecTransformer (68)
      +- ^ InputIteratorTransformer (67)
         +- VeloxResizeBatches (65)
            +- ShuffleQueryStage (64), Statistics(X)
               +- ColumnarExchange (63)
                  +- VeloxResizeBatches (62)
                     +- ^ FlushableHashAggregateExecTransformer (60)
                        +- ^ ProjectExecTransformer (59)
                           +- ^ FilterExecTransformer (58)
                              +- ^ ScanTransformer parquet  (57)
+- == Initial Plan ==
   HashAggregate (76)
   +- Exchange (75)
      +- HashAggregate (74)
         +- Project (73)
            +- Filter (72)
               +- Scan parquet (71)