== Physical Plan ==
AdaptiveSparkPlan (60)
+- == Final Plan ==
   VeloxColumnarToRow (42)
   +- ^ SortExecTransformer (40)
      +- ^ InputIteratorTransformer (39)
         +- VeloxResizeBatches (37)
            +- ShuffleQueryStage (36), Statistics(X)
               +- ColumnarExchange (35)
                  +- VeloxResizeBatches (34)
                     +- ^ RegularHashAggregateExecTransformer (32)
                        +- ^ InputIteratorTransformer (31)
                           +- VeloxResizeBatches (29)
                              +- ShuffleQueryStage (28), Statistics(X)
                                 +- ColumnarExchange (27)
                                    +- VeloxResizeBatches (26)
                                       +- ^ ProjectExecTransformer (24)
                                          +- ^ FlushableHashAggregateExecTransformer (23)
                                             +- ^ ProjectExecTransformer (22)
                                                +- ^ ShuffledHashJoinExecTransformer LeftSemi BuildRight (21)
                                                   :- ^ InputIteratorTransformer (10)
                                                   :  +- VeloxResizeBatches (8)
                                                   :     +- ShuffleQueryStage (7), Statistics(X)
                                                   :        +- ColumnarExchange (6)
                                                   :           +- VeloxResizeBatches (5)
                                                   :              +- ^ ProjectExecTransformer (3)
                                                   :                 +- ^ FilterExecTransformer (2)
                                                   :                    +- ^ ScanTransformer parquet  (1)
                                                   +- ^ InputIteratorTransformer (20)
                                                      +- VeloxResizeBatches (18)
                                                         +- ShuffleQueryStage (17), Statistics(X)
                                                            +- ColumnarExchange (16)
                                                               +- VeloxResizeBatches (15)
                                                                  +- ^ ProjectExecTransformer (13)
                                                                     +- ^ FilterExecTransformer (12)
                                                                        +- ^ ScanTransformer parquet  (11)
+- == Initial Plan ==
   Sort (59)
   +- Exchange (58)
      +- HashAggregate (57)
         +- Exchange (56)
            +- HashAggregate (55)
               +- Project (54)
                  +- SortMergeJoin LeftSemi (53)
                     :- Sort (47)
                     :  +- Exchange (46)
                     :     +- Project (45)
                     :        +- Filter (44)
                     :           +- Scan parquet (43)
                     +- Sort (52)
                        +- Exchange (51)
                           +- Project (50)
                              +- Filter (49)
                                 +- Scan parquet (48)


(1) ScanTransformer parquet 
Output [3]: [o_orderkey#X, o_orderdate#X, o_orderpriority#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(o_orderdate), GreaterThanOrEqual(o_orderdate,1993-07-01), LessThan(o_orderdate,1993-10-01)]
ReadSchema: struct<o_orderkey:bigint,o_orderdate:date,o_orderpriority:string>

(2) FilterExecTransformer
Input [3]: [o_orderkey#X, o_orderdate#X, o_orderpriority#X]
Arguments: ((isnotnull(o_orderdate#X) AND (o_orderdate#X >= 1993-07-01)) AND (o_orderdate#X < 1993-10-01))

(3) ProjectExecTransformer
Output [3]: [hash(o_orderkey#X, 42) AS hash_partition_key#X, o_orderkey#X, o_orderpriority#X]
Input [3]: [o_orderkey#X, o_orderdate#X, o_orderpriority#X]

(4) WholeStageCodegenTransformer (X)
Input [3]: [hash_partition_key#X, o_orderkey#X, o_orderpriority#X]
Arguments: false

(5) VeloxResizeBatches
Input [3]: [hash_partition_key#X, o_orderkey#X, o_orderpriority#X]
Arguments: X, X

(6) ColumnarExchange
Input [3]: [hash_partition_key#X, o_orderkey#X, o_orderpriority#X]
Arguments: hashpartitioning(o_orderkey#X, 1), ENSURE_REQUIREMENTS, [o_orderkey#X, o_orderpriority#X], [plan_id=X], [shuffle_writer_type=hash]

(7) ShuffleQueryStage
Output [2]: [o_orderkey#X, o_orderpriority#X]
Arguments: X

(8) VeloxResizeBatches
Input [2]: [o_orderkey#X, o_orderpriority#X]
Arguments: X, X

(9) InputAdapter
Input [2]: [o_orderkey#X, o_orderpriority#X]

(10) InputIteratorTransformer
Input [2]: [o_orderkey#X, o_orderpriority#X]

(11) ScanTransformer parquet 
Output [3]: [l_orderkey#X, l_commitdate#X, l_receiptdate#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(l_commitdate), IsNotNull(l_receiptdate)]
ReadSchema: struct<l_orderkey:bigint,l_commitdate:date,l_receiptdate:date>

(12) FilterExecTransformer
Input [3]: [l_orderkey#X, l_commitdate#X, l_receiptdate#X]
Arguments: ((isnotnull(l_commitdate#X) AND isnotnull(l_receiptdate#X)) AND (l_commitdate#X < l_receiptdate#X))

(13) ProjectExecTransformer
Output [2]: [hash(l_orderkey#X, 42) AS hash_partition_key#X, l_orderkey#X]
Input [3]: [l_orderkey#X, l_commitdate#X, l_receiptdate#X]

(14) WholeStageCodegenTransformer (X)
Input [2]: [hash_partition_key#X, l_orderkey#X]
Arguments: false

(15) VeloxResizeBatches
Input [2]: [hash_partition_key#X, l_orderkey#X]
Arguments: X, X

(16) ColumnarExchange
Input [2]: [hash_partition_key#X, l_orderkey#X]
Arguments: hashpartitioning(l_orderkey#X, 1), ENSURE_REQUIREMENTS, [l_orderkey#X], [plan_id=X], [shuffle_writer_type=hash]

(17) ShuffleQueryStage
Output [1]: [l_orderkey#X]
Arguments: X

(18) VeloxResizeBatches
Input [1]: [l_orderkey#X]
Arguments: X, X

(19) InputAdapter
Input [1]: [l_orderkey#X]

(20) InputIteratorTransformer
Input [1]: [l_orderkey#X]

(21) ShuffledHashJoinExecTransformer
Left keys [1]: [o_orderkey#X]
Right keys [1]: [l_orderkey#X]
Join type: LeftSemi
Join condition: None

(22) ProjectExecTransformer
Output [1]: [o_orderpriority#X]
Input [2]: [o_orderkey#X, o_orderpriority#X]

(23) FlushableHashAggregateExecTransformer
Input [1]: [o_orderpriority#X]
Keys [1]: [o_orderpriority#X]
Functions [1]: [partial_count(1)]
Aggregate Attributes [1]: [count#X]
Results [2]: [o_orderpriority#X, count#X]

(24) ProjectExecTransformer
Output [3]: [hash(o_orderpriority#X, 42) AS hash_partition_key#X, o_orderpriority#X, count#X]
Input [2]: [o_orderpriority#X, count#X]

(25) WholeStageCodegenTransformer (X)
Input [3]: [hash_partition_key#X, o_orderpriority#X, count#X]
Arguments: false

(26) VeloxResizeBatches
Input [3]: [hash_partition_key#X, o_orderpriority#X, count#X]
Arguments: X, X

(27) ColumnarExchange
Input [3]: [hash_partition_key#X, o_orderpriority#X, count#X]
Arguments: hashpartitioning(o_orderpriority#X, 1), ENSURE_REQUIREMENTS, [o_orderpriority#X, count#X], [plan_id=X], [shuffle_writer_type=hash]

(28) ShuffleQueryStage
Output [2]: [o_orderpriority#X, count#X]
Arguments: X

(29) VeloxResizeBatches
Input [2]: [o_orderpriority#X, count#X]
Arguments: X, X

(30) InputAdapter
Input [2]: [o_orderpriority#X, count#X]

(31) InputIteratorTransformer
Input [2]: [o_orderpriority#X, count#X]

(32) RegularHashAggregateExecTransformer
Input [2]: [o_orderpriority#X, count#X]
Keys [1]: [o_orderpriority#X]
Functions [1]: [count(1)]
Aggregate Attributes [1]: [count(1)#X]
Results [2]: [o_orderpriority#X, count(1)#X AS order_count#X]

(33) WholeStageCodegenTransformer (X)
Input [2]: [o_orderpriority#X, order_count#X]
Arguments: false

(34) VeloxResizeBatches
Input [2]: [o_orderpriority#X, order_count#X]
Arguments: X, X

(35) ColumnarExchange
Input [2]: [o_orderpriority#X, order_count#X]
Arguments: rangepartitioning(o_orderpriority#X ASC NULLS FIRST, 1), ENSURE_REQUIREMENTS, [plan_id=X], [shuffle_writer_type=hash]

(36) ShuffleQueryStage
Output [2]: [o_orderpriority#X, order_count#X]
Arguments: X

(37) VeloxResizeBatches
Input [2]: [o_orderpriority#X, order_count#X]
Arguments: X, X

(38) InputAdapter
Input [2]: [o_orderpriority#X, order_count#X]

(39) InputIteratorTransformer
Input [2]: [o_orderpriority#X, order_count#X]

(40) SortExecTransformer
Input [2]: [o_orderpriority#X, order_count#X]
Arguments: [o_orderpriority#X ASC NULLS FIRST], true, 0

(41) WholeStageCodegenTransformer (X)
Input [2]: [o_orderpriority#X, order_count#X]
Arguments: false

(42) VeloxColumnarToRow
Input [2]: [o_orderpriority#X, order_count#X]

(43) Scan parquet
Output [3]: [o_orderkey#X, o_orderdate#X, o_orderpriority#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(o_orderdate), GreaterThanOrEqual(o_orderdate,1993-07-01), LessThan(o_orderdate,1993-10-01)]
ReadSchema: struct<o_orderkey:bigint,o_orderdate:date,o_orderpriority:string>

(44) Filter
Input [3]: [o_orderkey#X, o_orderdate#X, o_orderpriority#X]
Condition : ((isnotnull(o_orderdate#X) AND (o_orderdate#X >= 1993-07-01)) AND (o_orderdate#X < 1993-10-01))

(45) Project
Output [2]: [o_orderkey#X, o_orderpriority#X]
Input [3]: [o_orderkey#X, o_orderdate#X, o_orderpriority#X]

(46) Exchange
Input [2]: [o_orderkey#X, o_orderpriority#X]
Arguments: hashpartitioning(o_orderkey#X, 1), ENSURE_REQUIREMENTS, [plan_id=X]

(47) Sort
Input [2]: [o_orderkey#X, o_orderpriority#X]
Arguments: [o_orderkey#X ASC NULLS FIRST], false, 0

(48) Scan parquet
Output [3]: [l_orderkey#X, l_commitdate#X, l_receiptdate#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(l_commitdate), IsNotNull(l_receiptdate)]
ReadSchema: struct<l_orderkey:bigint,l_commitdate:date,l_receiptdate:date>

(49) Filter
Input [3]: [l_orderkey#X, l_commitdate#X, l_receiptdate#X]
Condition : ((isnotnull(l_commitdate#X) AND isnotnull(l_receiptdate#X)) AND (l_commitdate#X < l_receiptdate#X))

(50) Project
Output [1]: [l_orderkey#X]
Input [3]: [l_orderkey#X, l_commitdate#X, l_receiptdate#X]

(51) Exchange
Input [1]: [l_orderkey#X]
Arguments: hashpartitioning(l_orderkey#X, 1), ENSURE_REQUIREMENTS, [plan_id=X]

(52) Sort
Input [1]: [l_orderkey#X]
Arguments: [l_orderkey#X ASC NULLS FIRST], false, 0

(53) SortMergeJoin
Left keys [1]: [o_orderkey#X]
Right keys [1]: [l_orderkey#X]
Join type: LeftSemi
Join condition: None

(54) Project
Output [1]: [o_orderpriority#X]
Input [2]: [o_orderkey#X, o_orderpriority#X]

(55) HashAggregate
Input [1]: [o_orderpriority#X]
Keys [1]: [o_orderpriority#X]
Functions [1]: [partial_count(1)]
Aggregate Attributes [1]: [count#X]
Results [2]: [o_orderpriority#X, count#X]

(56) Exchange
Input [2]: [o_orderpriority#X, count#X]
Arguments: hashpartitioning(o_orderpriority#X, 1), ENSURE_REQUIREMENTS, [plan_id=X]

(57) HashAggregate
Input [2]: [o_orderpriority#X, count#X]
Keys [1]: [o_orderpriority#X]
Functions [1]: [count(1)]
Aggregate Attributes [1]: [count(1)#X]
Results [2]: [o_orderpriority#X, count(1)#X AS order_count#X]

(58) Exchange
Input [2]: [o_orderpriority#X, order_count#X]
Arguments: rangepartitioning(o_orderpriority#X ASC NULLS FIRST, 1), ENSURE_REQUIREMENTS, [plan_id=X]

(59) Sort
Input [2]: [o_orderpriority#X, order_count#X]
Arguments: [o_orderpriority#X ASC NULLS FIRST], true, 0

(60) AdaptiveSparkPlan
Output [2]: [o_orderpriority#X, order_count#X]
Arguments: isFinalPlan=true