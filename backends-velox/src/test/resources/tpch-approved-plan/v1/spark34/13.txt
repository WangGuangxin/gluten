== Physical Plan ==
AdaptiveSparkPlan (61)
+- == Final Plan ==
   VeloxColumnarToRow (43)
   +- ^ SortExecTransformer (41)
      +- ^ InputIteratorTransformer (40)
         +- VeloxResizeBatches (38)
            +- ShuffleQueryStage (37), Statistics(X)
               +- ColumnarExchange (36)
                  +- VeloxResizeBatches (35)
                     +- ^ RegularHashAggregateExecTransformer (33)
                        +- ^ InputIteratorTransformer (32)
                           +- VeloxResizeBatches (30)
                              +- ShuffleQueryStage (29), Statistics(X)
                                 +- ColumnarExchange (28)
                                    +- VeloxResizeBatches (27)
                                       +- ^ ProjectExecTransformer (25)
                                          +- ^ FlushableHashAggregateExecTransformer (24)
                                             +- ^ ProjectExecTransformer (23)
                                                +- ^ RegularHashAggregateExecTransformer (22)
                                                   +- ^ ProjectExecTransformer (21)
                                                      +- ^ ShuffledHashJoinExecTransformer LeftOuter BuildLeft (20)
                                                         :- ^ InputIteratorTransformer (9)
                                                         :  +- VeloxResizeBatches (7)
                                                         :     +- ShuffleQueryStage (6), Statistics(X)
                                                         :        +- ColumnarExchange (5)
                                                         :           +- VeloxResizeBatches (4)
                                                         :              +- ^ ProjectExecTransformer (2)
                                                         :                 +- ^ ScanTransformer parquet  (1)
                                                         +- ^ InputIteratorTransformer (19)
                                                            +- VeloxResizeBatches (17)
                                                               +- ShuffleQueryStage (16), Statistics(X)
                                                                  +- ColumnarExchange (15)
                                                                     +- VeloxResizeBatches (14)
                                                                        +- ^ ProjectExecTransformer (12)
                                                                           +- ^ FilterExecTransformer (11)
                                                                              +- ^ ScanTransformer parquet  (10)
+- == Initial Plan ==
   Sort (60)
   +- Exchange (59)
      +- HashAggregate (58)
         +- Exchange (57)
            +- HashAggregate (56)
               +- HashAggregate (55)
                  +- HashAggregate (54)
                     +- Project (53)
                        +- SortMergeJoin LeftOuter (52)
                           :- Sort (46)
                           :  +- Exchange (45)
                           :     +- Scan parquet (44)
                           +- Sort (51)
                              +- Exchange (50)
                                 +- Project (49)
                                    +- Filter (48)
                                       +- Scan parquet (47)


(1) ScanTransformer parquet 
Output [1]: [c_custkey#X]
Batched: true
Location: InMemoryFileIndex [*]
ReadSchema: struct<c_custkey:bigint>

(2) ProjectExecTransformer
Output [2]: [hash(c_custkey#X, 42) AS hash_partition_key#X, c_custkey#X]
Input [1]: [c_custkey#X]

(3) WholeStageCodegenTransformer (X)
Input [2]: [hash_partition_key#X, c_custkey#X]
Arguments: false

(4) VeloxResizeBatches
Input [2]: [hash_partition_key#X, c_custkey#X]
Arguments: X, X

(5) ColumnarExchange
Input [2]: [hash_partition_key#X, c_custkey#X]
Arguments: hashpartitioning(c_custkey#X, 1), ENSURE_REQUIREMENTS, [c_custkey#X], [plan_id=X], [shuffle_writer_type=hash]

(6) ShuffleQueryStage
Output [1]: [c_custkey#X]
Arguments: X

(7) VeloxResizeBatches
Input [1]: [c_custkey#X]
Arguments: X, X

(8) InputAdapter
Input [1]: [c_custkey#X]

(9) InputIteratorTransformer
Input [1]: [c_custkey#X]

(10) ScanTransformer parquet 
Output [3]: [o_orderkey#X, o_custkey#X, o_comment#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(o_comment), IsNotNull(o_custkey)]
ReadSchema: struct<o_orderkey:bigint,o_custkey:bigint,o_comment:string>

(11) FilterExecTransformer
Input [3]: [o_orderkey#X, o_custkey#X, o_comment#X]
Arguments: ((isnotnull(o_comment#X) AND NOT o_comment#X LIKE %special%requests%) AND isnotnull(o_custkey#X))

(12) ProjectExecTransformer
Output [3]: [hash(o_custkey#X, 42) AS hash_partition_key#X, o_orderkey#X, o_custkey#X]
Input [3]: [o_orderkey#X, o_custkey#X, o_comment#X]

(13) WholeStageCodegenTransformer (X)
Input [3]: [hash_partition_key#X, o_orderkey#X, o_custkey#X]
Arguments: false

(14) VeloxResizeBatches
Input [3]: [hash_partition_key#X, o_orderkey#X, o_custkey#X]
Arguments: X, X

(15) ColumnarExchange
Input [3]: [hash_partition_key#X, o_orderkey#X, o_custkey#X]
Arguments: hashpartitioning(o_custkey#X, 1), ENSURE_REQUIREMENTS, [o_orderkey#X, o_custkey#X], [plan_id=X], [shuffle_writer_type=hash]

(16) ShuffleQueryStage
Output [2]: [o_orderkey#X, o_custkey#X]
Arguments: X

(17) VeloxResizeBatches
Input [2]: [o_orderkey#X, o_custkey#X]
Arguments: X, X

(18) InputAdapter
Input [2]: [o_orderkey#X, o_custkey#X]

(19) InputIteratorTransformer
Input [2]: [o_orderkey#X, o_custkey#X]

(20) ShuffledHashJoinExecTransformer
Left keys [1]: [c_custkey#X]
Right keys [1]: [o_custkey#X]
Join type: LeftOuter
Join condition: None

(21) ProjectExecTransformer
Output [2]: [c_custkey#X, o_orderkey#X]
Input [3]: [c_custkey#X, o_orderkey#X, o_custkey#X]

(22) RegularHashAggregateExecTransformer
Input [2]: [c_custkey#X, o_orderkey#X]
Keys [1]: [c_custkey#X]
Functions [1]: [count(o_orderkey#X)]
Aggregate Attributes [1]: [count(o_orderkey#X)#X]
Results [2]: [c_custkey#X, count(o_orderkey#X)#X]

(23) ProjectExecTransformer
Output [1]: [count(o_orderkey#X)#X AS c_count#X]
Input [2]: [c_custkey#X, count(o_orderkey#X)#X]

(24) FlushableHashAggregateExecTransformer
Input [1]: [c_count#X]
Keys [1]: [c_count#X]
Functions [1]: [partial_count(1)]
Aggregate Attributes [1]: [count#X]
Results [2]: [c_count#X, count#X]

(25) ProjectExecTransformer
Output [3]: [hash(c_count#X, 42) AS hash_partition_key#X, c_count#X, count#X]
Input [2]: [c_count#X, count#X]

(26) WholeStageCodegenTransformer (X)
Input [3]: [hash_partition_key#X, c_count#X, count#X]
Arguments: false

(27) VeloxResizeBatches
Input [3]: [hash_partition_key#X, c_count#X, count#X]
Arguments: X, X

(28) ColumnarExchange
Input [3]: [hash_partition_key#X, c_count#X, count#X]
Arguments: hashpartitioning(c_count#X, 1), ENSURE_REQUIREMENTS, [c_count#X, count#X], [plan_id=X], [shuffle_writer_type=hash]

(29) ShuffleQueryStage
Output [2]: [c_count#X, count#X]
Arguments: X

(30) VeloxResizeBatches
Input [2]: [c_count#X, count#X]
Arguments: X, X

(31) InputAdapter
Input [2]: [c_count#X, count#X]

(32) InputIteratorTransformer
Input [2]: [c_count#X, count#X]

(33) RegularHashAggregateExecTransformer
Input [2]: [c_count#X, count#X]
Keys [1]: [c_count#X]
Functions [1]: [count(1)]
Aggregate Attributes [1]: [count(1)#X]
Results [2]: [c_count#X, count(1)#X AS custdist#X]

(34) WholeStageCodegenTransformer (X)
Input [2]: [c_count#X, custdist#X]
Arguments: false

(35) VeloxResizeBatches
Input [2]: [c_count#X, custdist#X]
Arguments: X, X

(36) ColumnarExchange
Input [2]: [c_count#X, custdist#X]
Arguments: rangepartitioning(custdist#X DESC NULLS LAST, c_count#X DESC NULLS LAST, 1), ENSURE_REQUIREMENTS, [plan_id=X], [shuffle_writer_type=hash]

(37) ShuffleQueryStage
Output [2]: [c_count#X, custdist#X]
Arguments: X

(38) VeloxResizeBatches
Input [2]: [c_count#X, custdist#X]
Arguments: X, X

(39) InputAdapter
Input [2]: [c_count#X, custdist#X]

(40) InputIteratorTransformer
Input [2]: [c_count#X, custdist#X]

(41) SortExecTransformer
Input [2]: [c_count#X, custdist#X]
Arguments: [custdist#X DESC NULLS LAST, c_count#X DESC NULLS LAST], true, 0

(42) WholeStageCodegenTransformer (X)
Input [2]: [c_count#X, custdist#X]
Arguments: false

(43) VeloxColumnarToRow
Input [2]: [c_count#X, custdist#X]

(44) Scan parquet
Output [1]: [c_custkey#X]
Batched: true
Location: InMemoryFileIndex [*]
ReadSchema: struct<c_custkey:bigint>

(45) Exchange
Input [1]: [c_custkey#X]
Arguments: hashpartitioning(c_custkey#X, 1), ENSURE_REQUIREMENTS, [plan_id=X]

(46) Sort
Input [1]: [c_custkey#X]
Arguments: [c_custkey#X ASC NULLS FIRST], false, 0

(47) Scan parquet
Output [3]: [o_orderkey#X, o_custkey#X, o_comment#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(o_comment), IsNotNull(o_custkey)]
ReadSchema: struct<o_orderkey:bigint,o_custkey:bigint,o_comment:string>

(48) Filter
Input [3]: [o_orderkey#X, o_custkey#X, o_comment#X]
Condition : ((isnotnull(o_comment#X) AND NOT o_comment#X LIKE %special%requests%) AND isnotnull(o_custkey#X))

(49) Project
Output [2]: [o_orderkey#X, o_custkey#X]
Input [3]: [o_orderkey#X, o_custkey#X, o_comment#X]

(50) Exchange
Input [2]: [o_orderkey#X, o_custkey#X]
Arguments: hashpartitioning(o_custkey#X, 1), ENSURE_REQUIREMENTS, [plan_id=X]

(51) Sort
Input [2]: [o_orderkey#X, o_custkey#X]
Arguments: [o_custkey#X ASC NULLS FIRST], false, 0

(52) SortMergeJoin
Left keys [1]: [c_custkey#X]
Right keys [1]: [o_custkey#X]
Join type: LeftOuter
Join condition: None

(53) Project
Output [2]: [c_custkey#X, o_orderkey#X]
Input [3]: [c_custkey#X, o_orderkey#X, o_custkey#X]

(54) HashAggregate
Input [2]: [c_custkey#X, o_orderkey#X]
Keys [1]: [c_custkey#X]
Functions [1]: [partial_count(o_orderkey#X)]
Aggregate Attributes [1]: [count#X]
Results [2]: [c_custkey#X, count#X]

(55) HashAggregate
Input [2]: [c_custkey#X, count#X]
Keys [1]: [c_custkey#X]
Functions [1]: [count(o_orderkey#X)]
Aggregate Attributes [1]: [count(o_orderkey#X)#X]
Results [1]: [count(o_orderkey#X)#X AS c_count#X]

(56) HashAggregate
Input [1]: [c_count#X]
Keys [1]: [c_count#X]
Functions [1]: [partial_count(1)]
Aggregate Attributes [1]: [count#X]
Results [2]: [c_count#X, count#X]

(57) Exchange
Input [2]: [c_count#X, count#X]
Arguments: hashpartitioning(c_count#X, 1), ENSURE_REQUIREMENTS, [plan_id=X]

(58) HashAggregate
Input [2]: [c_count#X, count#X]
Keys [1]: [c_count#X]
Functions [1]: [count(1)]
Aggregate Attributes [1]: [count(1)#X]
Results [2]: [c_count#X, count(1)#X AS custdist#X]

(59) Exchange
Input [2]: [c_count#X, custdist#X]
Arguments: rangepartitioning(custdist#X DESC NULLS LAST, c_count#X DESC NULLS LAST, 1), ENSURE_REQUIREMENTS, [plan_id=X]

(60) Sort
Input [2]: [c_count#X, custdist#X]
Arguments: [custdist#X DESC NULLS LAST, c_count#X DESC NULLS LAST], true, 0

(61) AdaptiveSparkPlan
Output [2]: [c_count#X, custdist#X]
Arguments: isFinalPlan=true