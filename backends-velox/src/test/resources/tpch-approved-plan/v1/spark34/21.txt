== Physical Plan ==
AdaptiveSparkPlan (147)
+- == Final Plan ==
   VeloxColumnarToRow (101)
   +- ^ RegularHashAggregateExecTransformer (99)
      +- ^ InputIteratorTransformer (98)
         +- VeloxResizeBatches (96)
            +- ShuffleQueryStage (95), Statistics(X)
               +- ColumnarExchange (94)
                  +- VeloxResizeBatches (93)
                     +- ^ ProjectExecTransformer (91)
                        +- ^ FlushableHashAggregateExecTransformer (90)
                           +- ^ ProjectExecTransformer (89)
                              +- ^ ShuffledHashJoinExecTransformer Inner BuildRight (88)
                                 :- ^ InputIteratorTransformer (77)
                                 :  +- VeloxResizeBatches (75)
                                 :     +- ShuffleQueryStage (74), Statistics(X)
                                 :        +- ColumnarExchange (73)
                                 :           +- VeloxResizeBatches (72)
                                 :              +- ^ ProjectExecTransformer (70)
                                 :                 +- ^ ShuffledHashJoinExecTransformer Inner BuildRight (69)
                                 :                    :- ^ InputIteratorTransformer (58)
                                 :                    :  +- VeloxResizeBatches (56)
                                 :                    :     +- ShuffleQueryStage (55), Statistics(X)
                                 :                    :        +- ColumnarExchange (54)
                                 :                    :           +- VeloxResizeBatches (53)
                                 :                    :              +- ^ ProjectExecTransformer (51)
                                 :                    :                 +- ^ ShuffledHashJoinExecTransformer Inner BuildLeft (50)
                                 :                    :                    :- ^ InputIteratorTransformer (10)
                                 :                    :                    :  +- VeloxResizeBatches (8)
                                 :                    :                    :     +- ShuffleQueryStage (7), Statistics(X)
                                 :                    :                    :        +- ColumnarExchange (6)
                                 :                    :                    :           +- VeloxResizeBatches (5)
                                 :                    :                    :              +- ^ ProjectExecTransformer (3)
                                 :                    :                    :                 +- ^ FilterExecTransformer (2)
                                 :                    :                    :                    +- ^ ScanTransformer parquet  (1)
                                 :                    :                    +- ^ InputIteratorTransformer (49)
                                 :                    :                       +- VeloxResizeBatches (47)
                                 :                    :                          +- ShuffleQueryStage (46), Statistics(X)
                                 :                    :                             +- ColumnarExchange (45)
                                 :                    :                                +- VeloxResizeBatches (44)
                                 :                    :                                   +- ^ ProjectExecTransformer (42)
                                 :                    :                                      +- ^ ShuffledHashJoinExecTransformer LeftAnti BuildRight (41)
                                 :                    :                                         :- ^ ShuffledHashJoinExecTransformer LeftSemi BuildRight (30)
                                 :                    :                                         :  :- ^ InputIteratorTransformer (20)
                                 :                    :                                         :  :  +- VeloxResizeBatches (18)
                                 :                    :                                         :  :     +- ShuffleQueryStage (17), Statistics(X)
                                 :                    :                                         :  :        +- ColumnarExchange (16)
                                 :                    :                                         :  :           +- VeloxResizeBatches (15)
                                 :                    :                                         :  :              +- ^ ProjectExecTransformer (13)
                                 :                    :                                         :  :                 +- ^ FilterExecTransformer (12)
                                 :                    :                                         :  :                    +- ^ ScanTransformer parquet  (11)
                                 :                    :                                         :  +- ^ InputIteratorTransformer (29)
                                 :                    :                                         :     +- VeloxResizeBatches (27)
                                 :                    :                                         :        +- ShuffleQueryStage (26), Statistics(X)
                                 :                    :                                         :           +- ColumnarExchange (25)
                                 :                    :                                         :              +- VeloxResizeBatches (24)
                                 :                    :                                         :                 +- ^ ProjectExecTransformer (22)
                                 :                    :                                         :                    +- ^ ScanTransformer parquet  (21)
                                 :                    :                                         +- ^ InputIteratorTransformer (40)
                                 :                    :                                            +- VeloxResizeBatches (38)
                                 :                    :                                               +- ShuffleQueryStage (37), Statistics(X)
                                 :                    :                                                  +- ColumnarExchange (36)
                                 :                    :                                                     +- VeloxResizeBatches (35)
                                 :                    :                                                        +- ^ ProjectExecTransformer (33)
                                 :                    :                                                           +- ^ FilterExecTransformer (32)
                                 :                    :                                                              +- ^ ScanTransformer parquet  (31)
                                 :                    +- ^ InputIteratorTransformer (68)
                                 :                       +- VeloxResizeBatches (66)
                                 :                          +- ShuffleQueryStage (65), Statistics(X)
                                 :                             +- ColumnarExchange (64)
                                 :                                +- VeloxResizeBatches (63)
                                 :                                   +- ^ ProjectExecTransformer (61)
                                 :                                      +- ^ FilterExecTransformer (60)
                                 :                                         +- ^ ScanTransformer parquet  (59)
                                 +- ^ InputIteratorTransformer (87)
                                    +- VeloxResizeBatches (85)
                                       +- ShuffleQueryStage (84), Statistics(X)
                                          +- ColumnarExchange (83)
                                             +- VeloxResizeBatches (82)
                                                +- ^ ProjectExecTransformer (80)
                                                   +- ^ FilterExecTransformer (79)
                                                      +- ^ ScanTransformer parquet  (78)
+- == Initial Plan ==
   TakeOrderedAndProject (146)
   +- HashAggregate (145)
      +- Exchange (144)
         +- HashAggregate (143)
            +- Project (142)
               +- SortMergeJoin Inner (141)
                  :- Sort (135)
                  :  +- Exchange (134)
                  :     +- Project (133)
                  :        +- SortMergeJoin Inner (132)
                  :           :- Sort (126)
                  :           :  +- Exchange (125)
                  :           :     +- Project (124)
                  :           :        +- SortMergeJoin Inner (123)
                  :           :           :- Sort (105)
                  :           :           :  +- Exchange (104)
                  :           :           :     +- Filter (103)
                  :           :           :        +- Scan parquet (102)
                  :           :           +- Sort (122)
                  :           :              +- Exchange (121)
                  :           :                 +- SortMergeJoin LeftAnti (120)
                  :           :                    :- SortMergeJoin LeftSemi (114)
                  :           :                    :  :- Sort (110)
                  :           :                    :  :  +- Exchange (109)
                  :           :                    :  :     +- Project (108)
                  :           :                    :  :        +- Filter (107)
                  :           :                    :  :           +- Scan parquet (106)
                  :           :                    :  +- Sort (113)
                  :           :                    :     +- Exchange (112)
                  :           :                    :        +- Scan parquet (111)
                  :           :                    +- Sort (119)
                  :           :                       +- Exchange (118)
                  :           :                          +- Project (117)
                  :           :                             +- Filter (116)
                  :           :                                +- Scan parquet (115)
                  :           +- Sort (131)
                  :              +- Exchange (130)
                  :                 +- Project (129)
                  :                    +- Filter (128)
                  :                       +- Scan parquet (127)
                  +- Sort (140)
                     +- Exchange (139)
                        +- Project (138)
                           +- Filter (137)
                              +- Scan parquet (136)


(1) ScanTransformer parquet 
Output [3]: [s_suppkey#X, s_name#X, s_nationkey#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(s_suppkey), IsNotNull(s_nationkey)]
ReadSchema: struct<s_suppkey:bigint,s_name:string,s_nationkey:bigint>

(2) FilterExecTransformer
Input [3]: [s_suppkey#X, s_name#X, s_nationkey#X]
Arguments: (isnotnull(s_suppkey#X) AND isnotnull(s_nationkey#X))

(3) ProjectExecTransformer
Output [4]: [hash(s_suppkey#X, 42) AS hash_partition_key#X, s_suppkey#X, s_name#X, s_nationkey#X]
Input [3]: [s_suppkey#X, s_name#X, s_nationkey#X]

(4) WholeStageCodegenTransformer (X)
Input [4]: [hash_partition_key#X, s_suppkey#X, s_name#X, s_nationkey#X]
Arguments: false

(5) VeloxResizeBatches
Input [4]: [hash_partition_key#X, s_suppkey#X, s_name#X, s_nationkey#X]
Arguments: X, X

(6) ColumnarExchange
Input [4]: [hash_partition_key#X, s_suppkey#X, s_name#X, s_nationkey#X]
Arguments: hashpartitioning(s_suppkey#X, 1), ENSURE_REQUIREMENTS, [s_suppkey#X, s_name#X, s_nationkey#X], [plan_id=X], [shuffle_writer_type=hash]

(7) ShuffleQueryStage
Output [3]: [s_suppkey#X, s_name#X, s_nationkey#X]
Arguments: X

(8) VeloxResizeBatches
Input [3]: [s_suppkey#X, s_name#X, s_nationkey#X]
Arguments: X, X

(9) InputAdapter
Input [3]: [s_suppkey#X, s_name#X, s_nationkey#X]

(10) InputIteratorTransformer
Input [3]: [s_suppkey#X, s_name#X, s_nationkey#X]

(11) ScanTransformer parquet 
Output [4]: [l_orderkey#X, l_suppkey#X, l_commitdate#X, l_receiptdate#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(l_receiptdate), IsNotNull(l_commitdate), IsNotNull(l_suppkey), IsNotNull(l_orderkey)]
ReadSchema: struct<l_orderkey:bigint,l_suppkey:bigint,l_commitdate:date,l_receiptdate:date>

(12) FilterExecTransformer
Input [4]: [l_orderkey#X, l_suppkey#X, l_commitdate#X, l_receiptdate#X]
Arguments: ((((isnotnull(l_receiptdate#X) AND isnotnull(l_commitdate#X)) AND (l_receiptdate#X > l_commitdate#X)) AND isnotnull(l_suppkey#X)) AND isnotnull(l_orderkey#X))

(13) ProjectExecTransformer
Output [3]: [hash(l_orderkey#X, 42) AS hash_partition_key#X, l_orderkey#X, l_suppkey#X]
Input [4]: [l_orderkey#X, l_suppkey#X, l_commitdate#X, l_receiptdate#X]

(14) WholeStageCodegenTransformer (X)
Input [3]: [hash_partition_key#X, l_orderkey#X, l_suppkey#X]
Arguments: false

(15) VeloxResizeBatches
Input [3]: [hash_partition_key#X, l_orderkey#X, l_suppkey#X]
Arguments: X, X

(16) ColumnarExchange
Input [3]: [hash_partition_key#X, l_orderkey#X, l_suppkey#X]
Arguments: hashpartitioning(l_orderkey#X, 1), ENSURE_REQUIREMENTS, [l_orderkey#X, l_suppkey#X], [plan_id=X], [shuffle_writer_type=hash]

(17) ShuffleQueryStage
Output [2]: [l_orderkey#X, l_suppkey#X]
Arguments: X

(18) VeloxResizeBatches
Input [2]: [l_orderkey#X, l_suppkey#X]
Arguments: X, X

(19) InputAdapter
Input [2]: [l_orderkey#X, l_suppkey#X]

(20) InputIteratorTransformer
Input [2]: [l_orderkey#X, l_suppkey#X]

(21) ScanTransformer parquet 
Output [2]: [l_orderkey#X, l_suppkey#X]
Batched: true
Location: InMemoryFileIndex [*]
ReadSchema: struct<l_orderkey:bigint,l_suppkey:bigint>

(22) ProjectExecTransformer
Output [3]: [hash(l_orderkey#X, 42) AS hash_partition_key#X, l_orderkey#X, l_suppkey#X]
Input [2]: [l_orderkey#X, l_suppkey#X]

(23) WholeStageCodegenTransformer (X)
Input [3]: [hash_partition_key#X, l_orderkey#X, l_suppkey#X]
Arguments: false

(24) VeloxResizeBatches
Input [3]: [hash_partition_key#X, l_orderkey#X, l_suppkey#X]
Arguments: X, X

(25) ColumnarExchange
Input [3]: [hash_partition_key#X, l_orderkey#X, l_suppkey#X]
Arguments: hashpartitioning(l_orderkey#X, 1), ENSURE_REQUIREMENTS, [l_orderkey#X, l_suppkey#X], [plan_id=X], [shuffle_writer_type=hash]

(26) ShuffleQueryStage
Output [2]: [l_orderkey#X, l_suppkey#X]
Arguments: X

(27) VeloxResizeBatches
Input [2]: [l_orderkey#X, l_suppkey#X]
Arguments: X, X

(28) InputAdapter
Input [2]: [l_orderkey#X, l_suppkey#X]

(29) InputIteratorTransformer
Input [2]: [l_orderkey#X, l_suppkey#X]

(30) ShuffledHashJoinExecTransformer
Left keys [1]: [l_orderkey#X]
Right keys [1]: [l_orderkey#X]
Join type: LeftSemi
Join condition: NOT (l_suppkey#X = l_suppkey#X)

(31) ScanTransformer parquet 
Output [4]: [l_orderkey#X, l_suppkey#X, l_commitdate#X, l_receiptdate#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(l_receiptdate), IsNotNull(l_commitdate)]
ReadSchema: struct<l_orderkey:bigint,l_suppkey:bigint,l_commitdate:date,l_receiptdate:date>

(32) FilterExecTransformer
Input [4]: [l_orderkey#X, l_suppkey#X, l_commitdate#X, l_receiptdate#X]
Arguments: ((isnotnull(l_receiptdate#X) AND isnotnull(l_commitdate#X)) AND (l_receiptdate#X > l_commitdate#X))

(33) ProjectExecTransformer
Output [3]: [hash(l_orderkey#X, 42) AS hash_partition_key#X, l_orderkey#X, l_suppkey#X]
Input [4]: [l_orderkey#X, l_suppkey#X, l_commitdate#X, l_receiptdate#X]

(34) WholeStageCodegenTransformer (X)
Input [3]: [hash_partition_key#X, l_orderkey#X, l_suppkey#X]
Arguments: false

(35) VeloxResizeBatches
Input [3]: [hash_partition_key#X, l_orderkey#X, l_suppkey#X]
Arguments: X, X

(36) ColumnarExchange
Input [3]: [hash_partition_key#X, l_orderkey#X, l_suppkey#X]
Arguments: hashpartitioning(l_orderkey#X, 1), ENSURE_REQUIREMENTS, [l_orderkey#X, l_suppkey#X], [plan_id=X], [shuffle_writer_type=hash]

(37) ShuffleQueryStage
Output [2]: [l_orderkey#X, l_suppkey#X]
Arguments: X

(38) VeloxResizeBatches
Input [2]: [l_orderkey#X, l_suppkey#X]
Arguments: X, X

(39) InputAdapter
Input [2]: [l_orderkey#X, l_suppkey#X]

(40) InputIteratorTransformer
Input [2]: [l_orderkey#X, l_suppkey#X]

(41) ShuffledHashJoinExecTransformer
Left keys [1]: [l_orderkey#X]
Right keys [1]: [l_orderkey#X]
Join type: LeftAnti
Join condition: NOT (l_suppkey#X = l_suppkey#X)

(42) ProjectExecTransformer
Output [3]: [hash(l_suppkey#X, 42) AS hash_partition_key#X, l_orderkey#X, l_suppkey#X]
Input [2]: [l_orderkey#X, l_suppkey#X]

(43) WholeStageCodegenTransformer (X)
Input [3]: [hash_partition_key#X, l_orderkey#X, l_suppkey#X]
Arguments: false

(44) VeloxResizeBatches
Input [3]: [hash_partition_key#X, l_orderkey#X, l_suppkey#X]
Arguments: X, X

(45) ColumnarExchange
Input [3]: [hash_partition_key#X, l_orderkey#X, l_suppkey#X]
Arguments: hashpartitioning(l_suppkey#X, 1), ENSURE_REQUIREMENTS, [l_orderkey#X, l_suppkey#X], [plan_id=X], [shuffle_writer_type=hash]

(46) ShuffleQueryStage
Output [2]: [l_orderkey#X, l_suppkey#X]
Arguments: X

(47) VeloxResizeBatches
Input [2]: [l_orderkey#X, l_suppkey#X]
Arguments: X, X

(48) InputAdapter
Input [2]: [l_orderkey#X, l_suppkey#X]

(49) InputIteratorTransformer
Input [2]: [l_orderkey#X, l_suppkey#X]

(50) ShuffledHashJoinExecTransformer
Left keys [1]: [s_suppkey#X]
Right keys [1]: [l_suppkey#X]
Join type: Inner
Join condition: None

(51) ProjectExecTransformer
Output [4]: [hash(l_orderkey#X, 42) AS hash_partition_key#X, s_name#X, s_nationkey#X, l_orderkey#X]
Input [5]: [s_suppkey#X, s_name#X, s_nationkey#X, l_orderkey#X, l_suppkey#X]

(52) WholeStageCodegenTransformer (X)
Input [4]: [hash_partition_key#X, s_name#X, s_nationkey#X, l_orderkey#X]
Arguments: false

(53) VeloxResizeBatches
Input [4]: [hash_partition_key#X, s_name#X, s_nationkey#X, l_orderkey#X]
Arguments: X, X

(54) ColumnarExchange
Input [4]: [hash_partition_key#X, s_name#X, s_nationkey#X, l_orderkey#X]
Arguments: hashpartitioning(l_orderkey#X, 1), ENSURE_REQUIREMENTS, [s_name#X, s_nationkey#X, l_orderkey#X], [plan_id=X], [shuffle_writer_type=hash]

(55) ShuffleQueryStage
Output [3]: [s_name#X, s_nationkey#X, l_orderkey#X]
Arguments: X

(56) VeloxResizeBatches
Input [3]: [s_name#X, s_nationkey#X, l_orderkey#X]
Arguments: X, X

(57) InputAdapter
Input [3]: [s_name#X, s_nationkey#X, l_orderkey#X]

(58) InputIteratorTransformer
Input [3]: [s_name#X, s_nationkey#X, l_orderkey#X]

(59) ScanTransformer parquet 
Output [2]: [o_orderkey#X, o_orderstatus#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(o_orderstatus), EqualTo(o_orderstatus,F), IsNotNull(o_orderkey)]
ReadSchema: struct<o_orderkey:bigint,o_orderstatus:string>

(60) FilterExecTransformer
Input [2]: [o_orderkey#X, o_orderstatus#X]
Arguments: ((isnotnull(o_orderstatus#X) AND (o_orderstatus#X = F)) AND isnotnull(o_orderkey#X))

(61) ProjectExecTransformer
Output [2]: [hash(o_orderkey#X, 42) AS hash_partition_key#X, o_orderkey#X]
Input [2]: [o_orderkey#X, o_orderstatus#X]

(62) WholeStageCodegenTransformer (X)
Input [2]: [hash_partition_key#X, o_orderkey#X]
Arguments: false

(63) VeloxResizeBatches
Input [2]: [hash_partition_key#X, o_orderkey#X]
Arguments: X, X

(64) ColumnarExchange
Input [2]: [hash_partition_key#X, o_orderkey#X]
Arguments: hashpartitioning(o_orderkey#X, 1), ENSURE_REQUIREMENTS, [o_orderkey#X], [plan_id=X], [shuffle_writer_type=hash]

(65) ShuffleQueryStage
Output [1]: [o_orderkey#X]
Arguments: X

(66) VeloxResizeBatches
Input [1]: [o_orderkey#X]
Arguments: X, X

(67) InputAdapter
Input [1]: [o_orderkey#X]

(68) InputIteratorTransformer
Input [1]: [o_orderkey#X]

(69) ShuffledHashJoinExecTransformer
Left keys [1]: [l_orderkey#X]
Right keys [1]: [o_orderkey#X]
Join type: Inner
Join condition: None

(70) ProjectExecTransformer
Output [3]: [hash(s_nationkey#X, 42) AS hash_partition_key#X, s_name#X, s_nationkey#X]
Input [4]: [s_name#X, s_nationkey#X, l_orderkey#X, o_orderkey#X]

(71) WholeStageCodegenTransformer (X)
Input [3]: [hash_partition_key#X, s_name#X, s_nationkey#X]
Arguments: false

(72) VeloxResizeBatches
Input [3]: [hash_partition_key#X, s_name#X, s_nationkey#X]
Arguments: X, X

(73) ColumnarExchange
Input [3]: [hash_partition_key#X, s_name#X, s_nationkey#X]
Arguments: hashpartitioning(s_nationkey#X, 1), ENSURE_REQUIREMENTS, [s_name#X, s_nationkey#X], [plan_id=X], [shuffle_writer_type=hash]

(74) ShuffleQueryStage
Output [2]: [s_name#X, s_nationkey#X]
Arguments: X

(75) VeloxResizeBatches
Input [2]: [s_name#X, s_nationkey#X]
Arguments: X, X

(76) InputAdapter
Input [2]: [s_name#X, s_nationkey#X]

(77) InputIteratorTransformer
Input [2]: [s_name#X, s_nationkey#X]

(78) ScanTransformer parquet 
Output [2]: [n_nationkey#X, n_name#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(n_name), EqualTo(n_name,SAUDI ARABIA), IsNotNull(n_nationkey)]
ReadSchema: struct<n_nationkey:bigint,n_name:string>

(79) FilterExecTransformer
Input [2]: [n_nationkey#X, n_name#X]
Arguments: ((isnotnull(n_name#X) AND (n_name#X = SAUDI ARABIA)) AND isnotnull(n_nationkey#X))

(80) ProjectExecTransformer
Output [2]: [hash(n_nationkey#X, 42) AS hash_partition_key#X, n_nationkey#X]
Input [2]: [n_nationkey#X, n_name#X]

(81) WholeStageCodegenTransformer (X)
Input [2]: [hash_partition_key#X, n_nationkey#X]
Arguments: false

(82) VeloxResizeBatches
Input [2]: [hash_partition_key#X, n_nationkey#X]
Arguments: X, X

(83) ColumnarExchange
Input [2]: [hash_partition_key#X, n_nationkey#X]
Arguments: hashpartitioning(n_nationkey#X, 1), ENSURE_REQUIREMENTS, [n_nationkey#X], [plan_id=X], [shuffle_writer_type=hash]

(84) ShuffleQueryStage
Output [1]: [n_nationkey#X]
Arguments: X

(85) VeloxResizeBatches
Input [1]: [n_nationkey#X]
Arguments: X, X

(86) InputAdapter
Input [1]: [n_nationkey#X]

(87) InputIteratorTransformer
Input [1]: [n_nationkey#X]

(88) ShuffledHashJoinExecTransformer
Left keys [1]: [s_nationkey#X]
Right keys [1]: [n_nationkey#X]
Join type: Inner
Join condition: None

(89) ProjectExecTransformer
Output [1]: [s_name#X]
Input [3]: [s_name#X, s_nationkey#X, n_nationkey#X]

(90) FlushableHashAggregateExecTransformer
Input [1]: [s_name#X]
Keys [1]: [s_name#X]
Functions [1]: [partial_count(1)]
Aggregate Attributes [1]: [count#X]
Results [2]: [s_name#X, count#X]

(91) ProjectExecTransformer
Output [3]: [hash(s_name#X, 42) AS hash_partition_key#X, s_name#X, count#X]
Input [2]: [s_name#X, count#X]

(92) WholeStageCodegenTransformer (X)
Input [3]: [hash_partition_key#X, s_name#X, count#X]
Arguments: false

(93) VeloxResizeBatches
Input [3]: [hash_partition_key#X, s_name#X, count#X]
Arguments: X, X

(94) ColumnarExchange
Input [3]: [hash_partition_key#X, s_name#X, count#X]
Arguments: hashpartitioning(s_name#X, 1), ENSURE_REQUIREMENTS, [s_name#X, count#X], [plan_id=X], [shuffle_writer_type=hash]

(95) ShuffleQueryStage
Output [2]: [s_name#X, count#X]
Arguments: X

(96) VeloxResizeBatches
Input [2]: [s_name#X, count#X]
Arguments: X, X

(97) InputAdapter
Input [2]: [s_name#X, count#X]

(98) InputIteratorTransformer
Input [2]: [s_name#X, count#X]

(99) RegularHashAggregateExecTransformer
Input [2]: [s_name#X, count#X]
Keys [1]: [s_name#X]
Functions [1]: [count(1)]
Aggregate Attributes [1]: [count(1)#X]
Results [2]: [s_name#X, count(1)#X AS numwait#X]

(100) WholeStageCodegenTransformer (X)
Input [2]: [s_name#X, numwait#X]
Arguments: false

(101) VeloxColumnarToRow
Input [2]: [s_name#X, numwait#X]

(102) Scan parquet
Output [3]: [s_suppkey#X, s_name#X, s_nationkey#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(s_suppkey), IsNotNull(s_nationkey)]
ReadSchema: struct<s_suppkey:bigint,s_name:string,s_nationkey:bigint>

(103) Filter
Input [3]: [s_suppkey#X, s_name#X, s_nationkey#X]
Condition : (isnotnull(s_suppkey#X) AND isnotnull(s_nationkey#X))

(104) Exchange
Input [3]: [s_suppkey#X, s_name#X, s_nationkey#X]
Arguments: hashpartitioning(s_suppkey#X, 1), ENSURE_REQUIREMENTS, [plan_id=X]

(105) Sort
Input [3]: [s_suppkey#X, s_name#X, s_nationkey#X]
Arguments: [s_suppkey#X ASC NULLS FIRST], false, 0

(106) Scan parquet
Output [4]: [l_orderkey#X, l_suppkey#X, l_commitdate#X, l_receiptdate#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(l_receiptdate), IsNotNull(l_commitdate), IsNotNull(l_suppkey), IsNotNull(l_orderkey)]
ReadSchema: struct<l_orderkey:bigint,l_suppkey:bigint,l_commitdate:date,l_receiptdate:date>

(107) Filter
Input [4]: [l_orderkey#X, l_suppkey#X, l_commitdate#X, l_receiptdate#X]
Condition : ((((isnotnull(l_receiptdate#X) AND isnotnull(l_commitdate#X)) AND (l_receiptdate#X > l_commitdate#X)) AND isnotnull(l_suppkey#X)) AND isnotnull(l_orderkey#X))

(108) Project
Output [2]: [l_orderkey#X, l_suppkey#X]
Input [4]: [l_orderkey#X, l_suppkey#X, l_commitdate#X, l_receiptdate#X]

(109) Exchange
Input [2]: [l_orderkey#X, l_suppkey#X]
Arguments: hashpartitioning(l_orderkey#X, 1), ENSURE_REQUIREMENTS, [plan_id=X]

(110) Sort
Input [2]: [l_orderkey#X, l_suppkey#X]
Arguments: [l_orderkey#X ASC NULLS FIRST], false, 0

(111) Scan parquet
Output [2]: [l_orderkey#X, l_suppkey#X]
Batched: true
Location: InMemoryFileIndex [*]
ReadSchema: struct<l_orderkey:bigint,l_suppkey:bigint>

(112) Exchange
Input [2]: [l_orderkey#X, l_suppkey#X]
Arguments: hashpartitioning(l_orderkey#X, 1), ENSURE_REQUIREMENTS, [plan_id=X]

(113) Sort
Input [2]: [l_orderkey#X, l_suppkey#X]
Arguments: [l_orderkey#X ASC NULLS FIRST], false, 0

(114) SortMergeJoin
Left keys [1]: [l_orderkey#X]
Right keys [1]: [l_orderkey#X]
Join type: LeftSemi
Join condition: NOT (l_suppkey#X = l_suppkey#X)

(115) Scan parquet
Output [4]: [l_orderkey#X, l_suppkey#X, l_commitdate#X, l_receiptdate#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(l_receiptdate), IsNotNull(l_commitdate)]
ReadSchema: struct<l_orderkey:bigint,l_suppkey:bigint,l_commitdate:date,l_receiptdate:date>

(116) Filter
Input [4]: [l_orderkey#X, l_suppkey#X, l_commitdate#X, l_receiptdate#X]
Condition : ((isnotnull(l_receiptdate#X) AND isnotnull(l_commitdate#X)) AND (l_receiptdate#X > l_commitdate#X))

(117) Project
Output [2]: [l_orderkey#X, l_suppkey#X]
Input [4]: [l_orderkey#X, l_suppkey#X, l_commitdate#X, l_receiptdate#X]

(118) Exchange
Input [2]: [l_orderkey#X, l_suppkey#X]
Arguments: hashpartitioning(l_orderkey#X, 1), ENSURE_REQUIREMENTS, [plan_id=X]

(119) Sort
Input [2]: [l_orderkey#X, l_suppkey#X]
Arguments: [l_orderkey#X ASC NULLS FIRST], false, 0

(120) SortMergeJoin
Left keys [1]: [l_orderkey#X]
Right keys [1]: [l_orderkey#X]
Join type: LeftAnti
Join condition: NOT (l_suppkey#X = l_suppkey#X)

(121) Exchange
Input [2]: [l_orderkey#X, l_suppkey#X]
Arguments: hashpartitioning(l_suppkey#X, 1), ENSURE_REQUIREMENTS, [plan_id=X]

(122) Sort
Input [2]: [l_orderkey#X, l_suppkey#X]
Arguments: [l_suppkey#X ASC NULLS FIRST], false, 0

(123) SortMergeJoin
Left keys [1]: [s_suppkey#X]
Right keys [1]: [l_suppkey#X]
Join type: Inner
Join condition: None

(124) Project
Output [3]: [s_name#X, s_nationkey#X, l_orderkey#X]
Input [5]: [s_suppkey#X, s_name#X, s_nationkey#X, l_orderkey#X, l_suppkey#X]

(125) Exchange
Input [3]: [s_name#X, s_nationkey#X, l_orderkey#X]
Arguments: hashpartitioning(l_orderkey#X, 1), ENSURE_REQUIREMENTS, [plan_id=X]

(126) Sort
Input [3]: [s_name#X, s_nationkey#X, l_orderkey#X]
Arguments: [l_orderkey#X ASC NULLS FIRST], false, 0

(127) Scan parquet
Output [2]: [o_orderkey#X, o_orderstatus#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(o_orderstatus), EqualTo(o_orderstatus,F), IsNotNull(o_orderkey)]
ReadSchema: struct<o_orderkey:bigint,o_orderstatus:string>

(128) Filter
Input [2]: [o_orderkey#X, o_orderstatus#X]
Condition : ((isnotnull(o_orderstatus#X) AND (o_orderstatus#X = F)) AND isnotnull(o_orderkey#X))

(129) Project
Output [1]: [o_orderkey#X]
Input [2]: [o_orderkey#X, o_orderstatus#X]

(130) Exchange
Input [1]: [o_orderkey#X]
Arguments: hashpartitioning(o_orderkey#X, 1), ENSURE_REQUIREMENTS, [plan_id=X]

(131) Sort
Input [1]: [o_orderkey#X]
Arguments: [o_orderkey#X ASC NULLS FIRST], false, 0

(132) SortMergeJoin
Left keys [1]: [l_orderkey#X]
Right keys [1]: [o_orderkey#X]
Join type: Inner
Join condition: None

(133) Project
Output [2]: [s_name#X, s_nationkey#X]
Input [4]: [s_name#X, s_nationkey#X, l_orderkey#X, o_orderkey#X]

(134) Exchange
Input [2]: [s_name#X, s_nationkey#X]
Arguments: hashpartitioning(s_nationkey#X, 1), ENSURE_REQUIREMENTS, [plan_id=X]

(135) Sort
Input [2]: [s_name#X, s_nationkey#X]
Arguments: [s_nationkey#X ASC NULLS FIRST], false, 0

(136) Scan parquet
Output [2]: [n_nationkey#X, n_name#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(n_name), EqualTo(n_name,SAUDI ARABIA), IsNotNull(n_nationkey)]
ReadSchema: struct<n_nationkey:bigint,n_name:string>

(137) Filter
Input [2]: [n_nationkey#X, n_name#X]
Condition : ((isnotnull(n_name#X) AND (n_name#X = SAUDI ARABIA)) AND isnotnull(n_nationkey#X))

(138) Project
Output [1]: [n_nationkey#X]
Input [2]: [n_nationkey#X, n_name#X]

(139) Exchange
Input [1]: [n_nationkey#X]
Arguments: hashpartitioning(n_nationkey#X, 1), ENSURE_REQUIREMENTS, [plan_id=X]

(140) Sort
Input [1]: [n_nationkey#X]
Arguments: [n_nationkey#X ASC NULLS FIRST], false, 0

(141) SortMergeJoin
Left keys [1]: [s_nationkey#X]
Right keys [1]: [n_nationkey#X]
Join type: Inner
Join condition: None

(142) Project
Output [1]: [s_name#X]
Input [3]: [s_name#X, s_nationkey#X, n_nationkey#X]

(143) HashAggregate
Input [1]: [s_name#X]
Keys [1]: [s_name#X]
Functions [1]: [partial_count(1)]
Aggregate Attributes [1]: [count#X]
Results [2]: [s_name#X, count#X]

(144) Exchange
Input [2]: [s_name#X, count#X]
Arguments: hashpartitioning(s_name#X, 1), ENSURE_REQUIREMENTS, [plan_id=X]

(145) HashAggregate
Input [2]: [s_name#X, count#X]
Keys [1]: [s_name#X]
Functions [1]: [count(1)]
Aggregate Attributes [1]: [count(1)#X]
Results [2]: [s_name#X, count(1)#X AS numwait#X]

(146) TakeOrderedAndProject
Input [2]: [s_name#X, numwait#X]
Arguments: X, [numwait#X DESC NULLS LAST, s_name#X ASC NULLS FIRST], [s_name#X, numwait#X]

(147) AdaptiveSparkPlan
Output [2]: [s_name#X, numwait#X]
Arguments: isFinalPlan=true