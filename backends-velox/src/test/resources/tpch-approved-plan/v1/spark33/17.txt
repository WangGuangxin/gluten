== Physical Plan ==
AdaptiveSparkPlan (65)
+- == Final Plan ==
   VeloxColumnarToRow (42)
   +- ^ ProjectExecTransformer (40)
      +- ^ RegularHashAggregateExecTransformer (39)
         +- ^ ProjectExecTransformer (38)
            +- ^ ShuffledHashJoinExecTransformer Inner BuildRight (37)
               :- ^ ProjectExecTransformer (22)
               :  +- ^ ShuffledHashJoinExecTransformer Inner BuildRight (21)
               :     :- ^ InputIteratorTransformer (10)
               :     :  +- VeloxResizeBatches (8)
               :     :     +- ShuffleQueryStage (7), Statistics(X)
               :     :        +- ColumnarExchange (6)
               :     :           +- VeloxResizeBatches (5)
               :     :              +- ^ ProjectExecTransformer (3)
               :     :                 +- ^ FilterExecTransformer (2)
               :     :                    +- ^ ScanTransformer parquet  (1)
               :     +- ^ InputIteratorTransformer (20)
               :        +- VeloxResizeBatches (18)
               :           +- ShuffleQueryStage (17), Statistics(X)
               :              +- ColumnarExchange (16)
               :                 +- VeloxResizeBatches (15)
               :                    +- ^ ProjectExecTransformer (13)
               :                       +- ^ FilterExecTransformer (12)
               :                          +- ^ ScanTransformer parquet  (11)
               +- ^ FilterExecTransformer (36)
                  +- ^ ProjectExecTransformer (35)
                     +- ^ RegularHashAggregateExecTransformer (34)
                        +- ^ InputIteratorTransformer (33)
                           +- VeloxResizeBatches (31)
                              +- ShuffleQueryStage (30), Statistics(X)
                                 +- ColumnarExchange (29)
                                    +- VeloxResizeBatches (28)
                                       +- ^ ProjectExecTransformer (26)
                                          +- ^ FlushableHashAggregateExecTransformer (25)
                                             +- ^ FilterExecTransformer (24)
                                                +- ^ ScanTransformer parquet  (23)
+- == Initial Plan ==
   HashAggregate (64)
   +- HashAggregate (63)
      +- Project (62)
         +- SortMergeJoin Inner (61)
            :- Project (53)
            :  +- SortMergeJoin Inner (52)
            :     :- Sort (46)
            :     :  +- Exchange (45)
            :     :     +- Filter (44)
            :     :        +- Scan parquet (43)
            :     +- Sort (51)
            :        +- Exchange (50)
            :           +- Project (49)
            :              +- Filter (48)
            :                 +- Scan parquet (47)
            +- Sort (60)
               +- Filter (59)
                  +- HashAggregate (58)
                     +- Exchange (57)
                        +- HashAggregate (56)
                           +- Filter (55)
                              +- Scan parquet (54)


(1) ScanTransformer parquet 
Output [3]: [l_partkey#X, l_quantity#X, l_extendedprice#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(l_partkey), IsNotNull(l_quantity)]
ReadSchema: struct<l_partkey:bigint,l_quantity:decimal(12,2),l_extendedprice:decimal(12,2)>

(2) FilterExecTransformer
Input [3]: [l_partkey#X, l_quantity#X, l_extendedprice#X]
Arguments: (isnotnull(l_partkey#X) AND isnotnull(l_quantity#X))

(3) ProjectExecTransformer
Output [4]: [hash(l_partkey#X, 42) AS hash_partition_key#X, l_partkey#X, l_quantity#X, l_extendedprice#X]
Input [3]: [l_partkey#X, l_quantity#X, l_extendedprice#X]

(4) WholeStageCodegenTransformer (X)
Input [4]: [hash_partition_key#X, l_partkey#X, l_quantity#X, l_extendedprice#X]
Arguments: false

(5) VeloxResizeBatches
Input [4]: [hash_partition_key#X, l_partkey#X, l_quantity#X, l_extendedprice#X]
Arguments: X, X

(6) ColumnarExchange
Input [4]: [hash_partition_key#X, l_partkey#X, l_quantity#X, l_extendedprice#X]
Arguments: hashpartitioning(l_partkey#X, 1), ENSURE_REQUIREMENTS, [l_partkey#X, l_quantity#X, l_extendedprice#X], [plan_id=X], [shuffle_writer_type=hash]

(7) ShuffleQueryStage
Output [3]: [l_partkey#X, l_quantity#X, l_extendedprice#X]
Arguments: X

(8) VeloxResizeBatches
Input [3]: [l_partkey#X, l_quantity#X, l_extendedprice#X]
Arguments: X, X

(9) InputAdapter
Input [3]: [l_partkey#X, l_quantity#X, l_extendedprice#X]

(10) InputIteratorTransformer
Input [3]: [l_partkey#X, l_quantity#X, l_extendedprice#X]

(11) ScanTransformer parquet 
Output [3]: [p_partkey#X, p_brand#X, p_container#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(p_brand), IsNotNull(p_container), EqualTo(p_brand,Brand#X), EqualTo(p_container,MED BOX), IsNotNull(p_partkey)]
ReadSchema: struct<p_partkey:bigint,p_brand:string,p_container:string>

(12) FilterExecTransformer
Input [3]: [p_partkey#X, p_brand#X, p_container#X]
Arguments: ((((isnotnull(p_brand#X) AND isnotnull(p_container#X)) AND (p_brand#X = Brand#X)) AND (p_container#X = MED BOX)) AND isnotnull(p_partkey#X))

(13) ProjectExecTransformer
Output [2]: [hash(p_partkey#X, 42) AS hash_partition_key#X, p_partkey#X]
Input [3]: [p_partkey#X, p_brand#X, p_container#X]

(14) WholeStageCodegenTransformer (X)
Input [2]: [hash_partition_key#X, p_partkey#X]
Arguments: false

(15) VeloxResizeBatches
Input [2]: [hash_partition_key#X, p_partkey#X]
Arguments: X, X

(16) ColumnarExchange
Input [2]: [hash_partition_key#X, p_partkey#X]
Arguments: hashpartitioning(p_partkey#X, 1), ENSURE_REQUIREMENTS, [p_partkey#X], [plan_id=X], [shuffle_writer_type=hash]

(17) ShuffleQueryStage
Output [1]: [p_partkey#X]
Arguments: X

(18) VeloxResizeBatches
Input [1]: [p_partkey#X]
Arguments: X, X

(19) InputAdapter
Input [1]: [p_partkey#X]

(20) InputIteratorTransformer
Input [1]: [p_partkey#X]

(21) ShuffledHashJoinExecTransformer
Left keys [1]: [l_partkey#X]
Right keys [1]: [p_partkey#X]
Join condition: None

(22) ProjectExecTransformer
Output [3]: [l_quantity#X, l_extendedprice#X, p_partkey#X]
Input [4]: [l_partkey#X, l_quantity#X, l_extendedprice#X, p_partkey#X]

(23) ScanTransformer parquet 
Output [2]: [l_partkey#X, l_quantity#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(l_partkey)]
ReadSchema: struct<l_partkey:bigint,l_quantity:decimal(12,2)>

(24) FilterExecTransformer
Input [2]: [l_partkey#X, l_quantity#X]
Arguments: isnotnull(l_partkey#X)

(25) FlushableHashAggregateExecTransformer
Input [2]: [l_partkey#X, l_quantity#X]
Keys [1]: [l_partkey#X]
Functions [1]: [partial_avg(l_quantity#X)]
Aggregate Attributes [2]: [sum#X, count#X]
Results [3]: [l_partkey#X, sum#X, count#X]

(26) ProjectExecTransformer
Output [4]: [hash(l_partkey#X, 42) AS hash_partition_key#X, l_partkey#X, sum#X, count#X]
Input [3]: [l_partkey#X, sum#X, count#X]

(27) WholeStageCodegenTransformer (X)
Input [4]: [hash_partition_key#X, l_partkey#X, sum#X, count#X]
Arguments: false

(28) VeloxResizeBatches
Input [4]: [hash_partition_key#X, l_partkey#X, sum#X, count#X]
Arguments: X, X

(29) ColumnarExchange
Input [4]: [hash_partition_key#X, l_partkey#X, sum#X, count#X]
Arguments: hashpartitioning(l_partkey#X, 1), ENSURE_REQUIREMENTS, [l_partkey#X, sum#X, count#X], [plan_id=X], [shuffle_writer_type=hash]

(30) ShuffleQueryStage
Output [3]: [l_partkey#X, sum#X, count#X]
Arguments: X

(31) VeloxResizeBatches
Input [3]: [l_partkey#X, sum#X, count#X]
Arguments: X, X

(32) InputAdapter
Input [3]: [l_partkey#X, sum#X, count#X]

(33) InputIteratorTransformer
Input [3]: [l_partkey#X, sum#X, count#X]

(34) RegularHashAggregateExecTransformer
Input [3]: [l_partkey#X, sum#X, count#X]
Keys [1]: [l_partkey#X]
Functions [1]: [avg(l_quantity#X)]
Aggregate Attributes [1]: [avg(l_quantity#X)#X]
Results [2]: [l_partkey#X, avg(l_quantity#X)#X]

(35) ProjectExecTransformer
Output [2]: [CheckOverflow((0.200000 * promote_precision(avg(l_quantity#X)#X)), DecimalType(18,7)) AS (0.2 * avg(l_quantity))#X, l_partkey#X]
Input [2]: [l_partkey#X, avg(l_quantity#X)#X]

(36) FilterExecTransformer
Input [2]: [(0.2 * avg(l_quantity))#X, l_partkey#X]
Arguments: isnotnull((0.2 * avg(l_quantity))#X)

(37) ShuffledHashJoinExecTransformer
Left keys [1]: [p_partkey#X]
Right keys [1]: [l_partkey#X]
Join condition: (cast(l_quantity#X as decimal(18,7)) < (0.2 * avg(l_quantity))#X)

(38) ProjectExecTransformer
Output [1]: [l_extendedprice#X]
Input [5]: [l_quantity#X, l_extendedprice#X, p_partkey#X, (0.2 * avg(l_quantity))#X, l_partkey#X]

(39) RegularHashAggregateExecTransformer
Input [1]: [l_extendedprice#X]
Keys: []
Functions [1]: [sum(l_extendedprice#X)]
Aggregate Attributes [1]: [sum(l_extendedprice#X)#X]
Results [1]: [sum(l_extendedprice#X)#X]

(40) ProjectExecTransformer
Output [1]: [CheckOverflow((promote_precision(sum(l_extendedprice#X)#X) / 7.00), DecimalType(27,6)) AS avg_yearly#X]
Input [1]: [sum(l_extendedprice#X)#X]

(41) WholeStageCodegenTransformer (X)
Input [1]: [avg_yearly#X]
Arguments: false

(42) VeloxColumnarToRow
Input [1]: [avg_yearly#X]

(43) Scan parquet
Output [3]: [l_partkey#X, l_quantity#X, l_extendedprice#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(l_partkey), IsNotNull(l_quantity)]
ReadSchema: struct<l_partkey:bigint,l_quantity:decimal(12,2),l_extendedprice:decimal(12,2)>

(44) Filter
Input [3]: [l_partkey#X, l_quantity#X, l_extendedprice#X]
Condition : (isnotnull(l_partkey#X) AND isnotnull(l_quantity#X))

(45) Exchange
Input [3]: [l_partkey#X, l_quantity#X, l_extendedprice#X]
Arguments: hashpartitioning(l_partkey#X, 1), ENSURE_REQUIREMENTS, [plan_id=X]

(46) Sort
Input [3]: [l_partkey#X, l_quantity#X, l_extendedprice#X]
Arguments: [l_partkey#X ASC NULLS FIRST], false, 0

(47) Scan parquet
Output [3]: [p_partkey#X, p_brand#X, p_container#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(p_brand), IsNotNull(p_container), EqualTo(p_brand,Brand#X), EqualTo(p_container,MED BOX), IsNotNull(p_partkey)]
ReadSchema: struct<p_partkey:bigint,p_brand:string,p_container:string>

(48) Filter
Input [3]: [p_partkey#X, p_brand#X, p_container#X]
Condition : ((((isnotnull(p_brand#X) AND isnotnull(p_container#X)) AND (p_brand#X = Brand#X)) AND (p_container#X = MED BOX)) AND isnotnull(p_partkey#X))

(49) Project
Output [1]: [p_partkey#X]
Input [3]: [p_partkey#X, p_brand#X, p_container#X]

(50) Exchange
Input [1]: [p_partkey#X]
Arguments: hashpartitioning(p_partkey#X, 1), ENSURE_REQUIREMENTS, [plan_id=X]

(51) Sort
Input [1]: [p_partkey#X]
Arguments: [p_partkey#X ASC NULLS FIRST], false, 0

(52) SortMergeJoin
Left keys [1]: [l_partkey#X]
Right keys [1]: [p_partkey#X]
Join condition: None

(53) Project
Output [3]: [l_quantity#X, l_extendedprice#X, p_partkey#X]
Input [4]: [l_partkey#X, l_quantity#X, l_extendedprice#X, p_partkey#X]

(54) Scan parquet
Output [2]: [l_partkey#X, l_quantity#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(l_partkey)]
ReadSchema: struct<l_partkey:bigint,l_quantity:decimal(12,2)>

(55) Filter
Input [2]: [l_partkey#X, l_quantity#X]
Condition : isnotnull(l_partkey#X)

(56) HashAggregate
Input [2]: [l_partkey#X, l_quantity#X]
Keys [1]: [l_partkey#X]
Functions [1]: [partial_avg(l_quantity#X)]
Aggregate Attributes [2]: [sum#X, count#X]
Results [3]: [l_partkey#X, sum#X, count#X]

(57) Exchange
Input [3]: [l_partkey#X, sum#X, count#X]
Arguments: hashpartitioning(l_partkey#X, 1), ENSURE_REQUIREMENTS, [plan_id=X]

(58) HashAggregate
Input [3]: [l_partkey#X, sum#X, count#X]
Keys [1]: [l_partkey#X]
Functions [1]: [avg(l_quantity#X)]
Aggregate Attributes [1]: [avg(l_quantity#X)#X]
Results [2]: [CheckOverflow((0.200000 * promote_precision(avg(l_quantity#X)#X)), DecimalType(18,7)) AS (0.2 * avg(l_quantity))#X, l_partkey#X]

(59) Filter
Input [2]: [(0.2 * avg(l_quantity))#X, l_partkey#X]
Condition : isnotnull((0.2 * avg(l_quantity))#X)

(60) Sort
Input [2]: [(0.2 * avg(l_quantity))#X, l_partkey#X]
Arguments: [l_partkey#X ASC NULLS FIRST], false, 0

(61) SortMergeJoin
Left keys [1]: [p_partkey#X]
Right keys [1]: [l_partkey#X]
Join condition: (cast(l_quantity#X as decimal(18,7)) < (0.2 * avg(l_quantity))#X)

(62) Project
Output [1]: [l_extendedprice#X]
Input [5]: [l_quantity#X, l_extendedprice#X, p_partkey#X, (0.2 * avg(l_quantity))#X, l_partkey#X]

(63) HashAggregate
Input [1]: [l_extendedprice#X]
Keys: []
Functions [1]: [partial_sum(l_extendedprice#X)]
Aggregate Attributes [2]: [sum#X, isEmpty#X]
Results [2]: [sum#X, isEmpty#X]

(64) HashAggregate
Input [2]: [sum#X, isEmpty#X]
Keys: []
Functions [1]: [sum(l_extendedprice#X)]
Aggregate Attributes [1]: [sum(l_extendedprice#X)#X]
Results [1]: [CheckOverflow((promote_precision(sum(l_extendedprice#X)#X) / 7.00), DecimalType(27,6)) AS avg_yearly#X]

(65) AdaptiveSparkPlan
Output [1]: [avg_yearly#X]
Arguments: isFinalPlan=true