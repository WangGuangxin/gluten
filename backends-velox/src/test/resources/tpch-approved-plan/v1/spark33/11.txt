== Physical Plan ==
AdaptiveSparkPlan (88)
+- == Final Plan ==
   VeloxColumnarToRow (62)
   +- ^ SortExecTransformer (60)
      +- ^ InputIteratorTransformer (59)
         +- VeloxResizeBatches (57)
            +- ShuffleQueryStage (56), Statistics(X)
               +- ColumnarExchange (55)
                  +- VeloxResizeBatches (54)
                     +- ^ FilterExecTransformer (52)
                        +- ^ RegularHashAggregateExecTransformer (51)
                           +- ^ InputIteratorTransformer (50)
                              +- VeloxResizeBatches (48)
                                 +- ShuffleQueryStage (47), Statistics(X)
                                    +- ColumnarExchange (46)
                                       +- VeloxResizeBatches (45)
                                          +- ^ ProjectExecTransformer (43)
                                             +- ^ FlushableHashAggregateExecTransformer (42)
                                                +- ^ ProjectExecTransformer (41)
                                                   +- ^ ShuffledHashJoinExecTransformer Inner BuildRight (40)
                                                      :- ^ InputIteratorTransformer (29)
                                                      :  +- VeloxResizeBatches (27)
                                                      :     +- ShuffleQueryStage (26), Statistics(X)
                                                      :        +- ColumnarExchange (25)
                                                      :           +- VeloxResizeBatches (24)
                                                      :              +- ^ ProjectExecTransformer (22)
                                                      :                 +- ^ ShuffledHashJoinExecTransformer Inner BuildRight (21)
                                                      :                    :- ^ InputIteratorTransformer (10)
                                                      :                    :  +- VeloxResizeBatches (8)
                                                      :                    :     +- ShuffleQueryStage (7), Statistics(X)
                                                      :                    :        +- ColumnarExchange (6)
                                                      :                    :           +- VeloxResizeBatches (5)
                                                      :                    :              +- ^ ProjectExecTransformer (3)
                                                      :                    :                 +- ^ FilterExecTransformer (2)
                                                      :                    :                    +- ^ ScanTransformer parquet  (1)
                                                      :                    +- ^ InputIteratorTransformer (20)
                                                      :                       +- VeloxResizeBatches (18)
                                                      :                          +- ShuffleQueryStage (17), Statistics(X)
                                                      :                             +- ColumnarExchange (16)
                                                      :                                +- VeloxResizeBatches (15)
                                                      :                                   +- ^ ProjectExecTransformer (13)
                                                      :                                      +- ^ FilterExecTransformer (12)
                                                      :                                         +- ^ ScanTransformer parquet  (11)
                                                      +- ^ InputIteratorTransformer (39)
                                                         +- VeloxResizeBatches (37)
                                                            +- ShuffleQueryStage (36), Statistics(X)
                                                               +- ColumnarExchange (35)
                                                                  +- VeloxResizeBatches (34)
                                                                     +- ^ ProjectExecTransformer (32)
                                                                        +- ^ FilterExecTransformer (31)
                                                                           +- ^ ScanTransformer parquet  (30)
+- == Initial Plan ==
   Sort (87)
   +- Exchange (86)
      +- Filter (85)
         +- HashAggregate (84)
            +- Exchange (83)
               +- HashAggregate (82)
                  +- Project (81)
                     +- SortMergeJoin Inner (80)
                        :- Sort (74)
                        :  +- Exchange (73)
                        :     +- Project (72)
                        :        +- SortMergeJoin Inner (71)
                        :           :- Sort (66)
                        :           :  +- Exchange (65)
                        :           :     +- Filter (64)
                        :           :        +- Scan parquet (63)
                        :           +- Sort (70)
                        :              +- Exchange (69)
                        :                 +- Filter (68)
                        :                    +- Scan parquet (67)
                        +- Sort (79)
                           +- Exchange (78)
                              +- Project (77)
                                 +- Filter (76)
                                    +- Scan parquet (75)


(1) ScanTransformer parquet 
Output [4]: [ps_partkey#X, ps_suppkey#X, ps_availqty#X, ps_supplycost#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(ps_suppkey)]
ReadSchema: struct<ps_partkey:bigint,ps_suppkey:bigint,ps_availqty:int,ps_supplycost:decimal(12,2)>

(2) FilterExecTransformer
Input [4]: [ps_partkey#X, ps_suppkey#X, ps_availqty#X, ps_supplycost#X]
Arguments: isnotnull(ps_suppkey#X)

(3) ProjectExecTransformer
Output [5]: [hash(ps_suppkey#X, 42) AS hash_partition_key#X, ps_partkey#X, ps_suppkey#X, ps_availqty#X, ps_supplycost#X]
Input [4]: [ps_partkey#X, ps_suppkey#X, ps_availqty#X, ps_supplycost#X]

(4) WholeStageCodegenTransformer (X)
Input [5]: [hash_partition_key#X, ps_partkey#X, ps_suppkey#X, ps_availqty#X, ps_supplycost#X]
Arguments: false

(5) VeloxResizeBatches
Input [5]: [hash_partition_key#X, ps_partkey#X, ps_suppkey#X, ps_availqty#X, ps_supplycost#X]
Arguments: X, X

(6) ColumnarExchange
Input [5]: [hash_partition_key#X, ps_partkey#X, ps_suppkey#X, ps_availqty#X, ps_supplycost#X]
Arguments: hashpartitioning(ps_suppkey#X, 1), ENSURE_REQUIREMENTS, [ps_partkey#X, ps_suppkey#X, ps_availqty#X, ps_supplycost#X], [plan_id=X], [shuffle_writer_type=hash]

(7) ShuffleQueryStage
Output [4]: [ps_partkey#X, ps_suppkey#X, ps_availqty#X, ps_supplycost#X]
Arguments: X

(8) VeloxResizeBatches
Input [4]: [ps_partkey#X, ps_suppkey#X, ps_availqty#X, ps_supplycost#X]
Arguments: X, X

(9) InputAdapter
Input [4]: [ps_partkey#X, ps_suppkey#X, ps_availqty#X, ps_supplycost#X]

(10) InputIteratorTransformer
Input [4]: [ps_partkey#X, ps_suppkey#X, ps_availqty#X, ps_supplycost#X]

(11) ScanTransformer parquet 
Output [2]: [s_suppkey#X, s_nationkey#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(s_suppkey), IsNotNull(s_nationkey)]
ReadSchema: struct<s_suppkey:bigint,s_nationkey:bigint>

(12) FilterExecTransformer
Input [2]: [s_suppkey#X, s_nationkey#X]
Arguments: (isnotnull(s_suppkey#X) AND isnotnull(s_nationkey#X))

(13) ProjectExecTransformer
Output [3]: [hash(s_suppkey#X, 42) AS hash_partition_key#X, s_suppkey#X, s_nationkey#X]
Input [2]: [s_suppkey#X, s_nationkey#X]

(14) WholeStageCodegenTransformer (X)
Input [3]: [hash_partition_key#X, s_suppkey#X, s_nationkey#X]
Arguments: false

(15) VeloxResizeBatches
Input [3]: [hash_partition_key#X, s_suppkey#X, s_nationkey#X]
Arguments: X, X

(16) ColumnarExchange
Input [3]: [hash_partition_key#X, s_suppkey#X, s_nationkey#X]
Arguments: hashpartitioning(s_suppkey#X, 1), ENSURE_REQUIREMENTS, [s_suppkey#X, s_nationkey#X], [plan_id=X], [shuffle_writer_type=hash]

(17) ShuffleQueryStage
Output [2]: [s_suppkey#X, s_nationkey#X]
Arguments: X

(18) VeloxResizeBatches
Input [2]: [s_suppkey#X, s_nationkey#X]
Arguments: X, X

(19) InputAdapter
Input [2]: [s_suppkey#X, s_nationkey#X]

(20) InputIteratorTransformer
Input [2]: [s_suppkey#X, s_nationkey#X]

(21) ShuffledHashJoinExecTransformer
Left keys [1]: [ps_suppkey#X]
Right keys [1]: [s_suppkey#X]
Join condition: None

(22) ProjectExecTransformer
Output [5]: [hash(s_nationkey#X, 42) AS hash_partition_key#X, ps_partkey#X, ps_availqty#X, ps_supplycost#X, s_nationkey#X]
Input [6]: [ps_partkey#X, ps_suppkey#X, ps_availqty#X, ps_supplycost#X, s_suppkey#X, s_nationkey#X]

(23) WholeStageCodegenTransformer (X)
Input [5]: [hash_partition_key#X, ps_partkey#X, ps_availqty#X, ps_supplycost#X, s_nationkey#X]
Arguments: false

(24) VeloxResizeBatches
Input [5]: [hash_partition_key#X, ps_partkey#X, ps_availqty#X, ps_supplycost#X, s_nationkey#X]
Arguments: X, X

(25) ColumnarExchange
Input [5]: [hash_partition_key#X, ps_partkey#X, ps_availqty#X, ps_supplycost#X, s_nationkey#X]
Arguments: hashpartitioning(s_nationkey#X, 1), ENSURE_REQUIREMENTS, [ps_partkey#X, ps_availqty#X, ps_supplycost#X, s_nationkey#X], [plan_id=X], [shuffle_writer_type=hash]

(26) ShuffleQueryStage
Output [4]: [ps_partkey#X, ps_availqty#X, ps_supplycost#X, s_nationkey#X]
Arguments: X

(27) VeloxResizeBatches
Input [4]: [ps_partkey#X, ps_availqty#X, ps_supplycost#X, s_nationkey#X]
Arguments: X, X

(28) InputAdapter
Input [4]: [ps_partkey#X, ps_availqty#X, ps_supplycost#X, s_nationkey#X]

(29) InputIteratorTransformer
Input [4]: [ps_partkey#X, ps_availqty#X, ps_supplycost#X, s_nationkey#X]

(30) ScanTransformer parquet 
Output [2]: [n_nationkey#X, n_name#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(n_name), EqualTo(n_name,GERMANY), IsNotNull(n_nationkey)]
ReadSchema: struct<n_nationkey:bigint,n_name:string>

(31) FilterExecTransformer
Input [2]: [n_nationkey#X, n_name#X]
Arguments: ((isnotnull(n_name#X) AND (n_name#X = GERMANY)) AND isnotnull(n_nationkey#X))

(32) ProjectExecTransformer
Output [2]: [hash(n_nationkey#X, 42) AS hash_partition_key#X, n_nationkey#X]
Input [2]: [n_nationkey#X, n_name#X]

(33) WholeStageCodegenTransformer (X)
Input [2]: [hash_partition_key#X, n_nationkey#X]
Arguments: false

(34) VeloxResizeBatches
Input [2]: [hash_partition_key#X, n_nationkey#X]
Arguments: X, X

(35) ColumnarExchange
Input [2]: [hash_partition_key#X, n_nationkey#X]
Arguments: hashpartitioning(n_nationkey#X, 1), ENSURE_REQUIREMENTS, [n_nationkey#X], [plan_id=X], [shuffle_writer_type=hash]

(36) ShuffleQueryStage
Output [1]: [n_nationkey#X]
Arguments: X

(37) VeloxResizeBatches
Input [1]: [n_nationkey#X]
Arguments: X, X

(38) InputAdapter
Input [1]: [n_nationkey#X]

(39) InputIteratorTransformer
Input [1]: [n_nationkey#X]

(40) ShuffledHashJoinExecTransformer
Left keys [1]: [s_nationkey#X]
Right keys [1]: [n_nationkey#X]
Join condition: None

(41) ProjectExecTransformer
Output [2]: [ps_partkey#X, CheckOverflow((promote_precision(ps_supplycost#X) * promote_precision(cast(ps_availqty#X as decimal(12,2)))), DecimalType(23,2)) AS _pre_X#X]
Input [5]: [ps_partkey#X, ps_availqty#X, ps_supplycost#X, s_nationkey#X, n_nationkey#X]

(42) FlushableHashAggregateExecTransformer
Input [2]: [ps_partkey#X, _pre_X#X]
Keys [1]: [ps_partkey#X]
Functions [1]: [partial_sum(_pre_X#X)]
Aggregate Attributes [2]: [sum#X, isEmpty#X]
Results [3]: [ps_partkey#X, sum#X, isEmpty#X]

(43) ProjectExecTransformer
Output [4]: [hash(ps_partkey#X, 42) AS hash_partition_key#X, ps_partkey#X, sum#X, isEmpty#X]
Input [3]: [ps_partkey#X, sum#X, isEmpty#X]

(44) WholeStageCodegenTransformer (X)
Input [4]: [hash_partition_key#X, ps_partkey#X, sum#X, isEmpty#X]
Arguments: false

(45) VeloxResizeBatches
Input [4]: [hash_partition_key#X, ps_partkey#X, sum#X, isEmpty#X]
Arguments: X, X

(46) ColumnarExchange
Input [4]: [hash_partition_key#X, ps_partkey#X, sum#X, isEmpty#X]
Arguments: hashpartitioning(ps_partkey#X, 1), ENSURE_REQUIREMENTS, [ps_partkey#X, sum#X, isEmpty#X], [plan_id=X], [shuffle_writer_type=hash]

(47) ShuffleQueryStage
Output [3]: [ps_partkey#X, sum#X, isEmpty#X]
Arguments: X

(48) VeloxResizeBatches
Input [3]: [ps_partkey#X, sum#X, isEmpty#X]
Arguments: X, X

(49) InputAdapter
Input [3]: [ps_partkey#X, sum#X, isEmpty#X]

(50) InputIteratorTransformer
Input [3]: [ps_partkey#X, sum#X, isEmpty#X]

(51) RegularHashAggregateExecTransformer
Input [3]: [ps_partkey#X, sum#X, isEmpty#X]
Keys [1]: [ps_partkey#X]
Functions [1]: [sum(CheckOverflow((promote_precision(ps_supplycost#X) * promote_precision(cast(ps_availqty#X as decimal(12,2)))), DecimalType(23,2)))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(ps_supplycost#X) * promote_precision(cast(ps_availqty#X as decimal(12,2)))), DecimalType(23,2)))#X]
Results [2]: [ps_partkey#X, sum(CheckOverflow((promote_precision(ps_supplycost#X) * promote_precision(cast(ps_availqty#X as decimal(12,2)))), DecimalType(23,2)))#X AS value#X]

(52) FilterExecTransformer
Input [2]: [ps_partkey#X, value#X]
Arguments: (isnotnull(value#X) AND (cast(value#X as decimal(38,6)) > Subquery subquery#X, [id=#X]))

(53) WholeStageCodegenTransformer (X)
Input [2]: [ps_partkey#X, value#X]
Arguments: false

(54) VeloxResizeBatches
Input [2]: [ps_partkey#X, value#X]
Arguments: X, X

(55) ColumnarExchange
Input [2]: [ps_partkey#X, value#X]
Arguments: rangepartitioning(value#X DESC NULLS LAST, 1), ENSURE_REQUIREMENTS, [plan_id=X], [shuffle_writer_type=hash]

(56) ShuffleQueryStage
Output [2]: [ps_partkey#X, value#X]
Arguments: X

(57) VeloxResizeBatches
Input [2]: [ps_partkey#X, value#X]
Arguments: X, X

(58) InputAdapter
Input [2]: [ps_partkey#X, value#X]

(59) InputIteratorTransformer
Input [2]: [ps_partkey#X, value#X]

(60) SortExecTransformer
Input [2]: [ps_partkey#X, value#X]
Arguments: [value#X DESC NULLS LAST], true, 0

(61) WholeStageCodegenTransformer (X)
Input [2]: [ps_partkey#X, value#X]
Arguments: false

(62) VeloxColumnarToRow
Input [2]: [ps_partkey#X, value#X]

(63) Scan parquet
Output [4]: [ps_partkey#X, ps_suppkey#X, ps_availqty#X, ps_supplycost#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(ps_suppkey)]
ReadSchema: struct<ps_partkey:bigint,ps_suppkey:bigint,ps_availqty:int,ps_supplycost:decimal(12,2)>

(64) Filter
Input [4]: [ps_partkey#X, ps_suppkey#X, ps_availqty#X, ps_supplycost#X]
Condition : isnotnull(ps_suppkey#X)

(65) Exchange
Input [4]: [ps_partkey#X, ps_suppkey#X, ps_availqty#X, ps_supplycost#X]
Arguments: hashpartitioning(ps_suppkey#X, 1), ENSURE_REQUIREMENTS, [plan_id=X]

(66) Sort
Input [4]: [ps_partkey#X, ps_suppkey#X, ps_availqty#X, ps_supplycost#X]
Arguments: [ps_suppkey#X ASC NULLS FIRST], false, 0

(67) Scan parquet
Output [2]: [s_suppkey#X, s_nationkey#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(s_suppkey), IsNotNull(s_nationkey)]
ReadSchema: struct<s_suppkey:bigint,s_nationkey:bigint>

(68) Filter
Input [2]: [s_suppkey#X, s_nationkey#X]
Condition : (isnotnull(s_suppkey#X) AND isnotnull(s_nationkey#X))

(69) Exchange
Input [2]: [s_suppkey#X, s_nationkey#X]
Arguments: hashpartitioning(s_suppkey#X, 1), ENSURE_REQUIREMENTS, [plan_id=X]

(70) Sort
Input [2]: [s_suppkey#X, s_nationkey#X]
Arguments: [s_suppkey#X ASC NULLS FIRST], false, 0

(71) SortMergeJoin
Left keys [1]: [ps_suppkey#X]
Right keys [1]: [s_suppkey#X]
Join condition: None

(72) Project
Output [4]: [ps_partkey#X, ps_availqty#X, ps_supplycost#X, s_nationkey#X]
Input [6]: [ps_partkey#X, ps_suppkey#X, ps_availqty#X, ps_supplycost#X, s_suppkey#X, s_nationkey#X]

(73) Exchange
Input [4]: [ps_partkey#X, ps_availqty#X, ps_supplycost#X, s_nationkey#X]
Arguments: hashpartitioning(s_nationkey#X, 1), ENSURE_REQUIREMENTS, [plan_id=X]

(74) Sort
Input [4]: [ps_partkey#X, ps_availqty#X, ps_supplycost#X, s_nationkey#X]
Arguments: [s_nationkey#X ASC NULLS FIRST], false, 0

(75) Scan parquet
Output [2]: [n_nationkey#X, n_name#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(n_name), EqualTo(n_name,GERMANY), IsNotNull(n_nationkey)]
ReadSchema: struct<n_nationkey:bigint,n_name:string>

(76) Filter
Input [2]: [n_nationkey#X, n_name#X]
Condition : ((isnotnull(n_name#X) AND (n_name#X = GERMANY)) AND isnotnull(n_nationkey#X))

(77) Project
Output [1]: [n_nationkey#X]
Input [2]: [n_nationkey#X, n_name#X]

(78) Exchange
Input [1]: [n_nationkey#X]
Arguments: hashpartitioning(n_nationkey#X, 1), ENSURE_REQUIREMENTS, [plan_id=X]

(79) Sort
Input [1]: [n_nationkey#X]
Arguments: [n_nationkey#X ASC NULLS FIRST], false, 0

(80) SortMergeJoin
Left keys [1]: [s_nationkey#X]
Right keys [1]: [n_nationkey#X]
Join condition: None

(81) Project
Output [3]: [ps_partkey#X, ps_availqty#X, ps_supplycost#X]
Input [5]: [ps_partkey#X, ps_availqty#X, ps_supplycost#X, s_nationkey#X, n_nationkey#X]

(82) HashAggregate
Input [3]: [ps_partkey#X, ps_availqty#X, ps_supplycost#X]
Keys [1]: [ps_partkey#X]
Functions [1]: [partial_sum(CheckOverflow((promote_precision(ps_supplycost#X) * promote_precision(cast(ps_availqty#X as decimal(12,2)))), DecimalType(23,2)))]
Aggregate Attributes [2]: [sum#X, isEmpty#X]
Results [3]: [ps_partkey#X, sum#X, isEmpty#X]

(83) Exchange
Input [3]: [ps_partkey#X, sum#X, isEmpty#X]
Arguments: hashpartitioning(ps_partkey#X, 1), ENSURE_REQUIREMENTS, [plan_id=X]

(84) HashAggregate
Input [3]: [ps_partkey#X, sum#X, isEmpty#X]
Keys [1]: [ps_partkey#X]
Functions [1]: [sum(CheckOverflow((promote_precision(ps_supplycost#X) * promote_precision(cast(ps_availqty#X as decimal(12,2)))), DecimalType(23,2)))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(ps_supplycost#X) * promote_precision(cast(ps_availqty#X as decimal(12,2)))), DecimalType(23,2)))#X]
Results [2]: [ps_partkey#X, sum(CheckOverflow((promote_precision(ps_supplycost#X) * promote_precision(cast(ps_availqty#X as decimal(12,2)))), DecimalType(23,2)))#X AS value#X]

(85) Filter
Input [2]: [ps_partkey#X, value#X]
Condition : (isnotnull(value#X) AND (cast(value#X as decimal(38,6)) > Subquery subquery#X, [id=#X]))

(86) Exchange
Input [2]: [ps_partkey#X, value#X]
Arguments: rangepartitioning(value#X DESC NULLS LAST, 1), ENSURE_REQUIREMENTS, [plan_id=X]

(87) Sort
Input [2]: [ps_partkey#X, value#X]
Arguments: [value#X DESC NULLS LAST], true, 0

(88) AdaptiveSparkPlan
Output [2]: [ps_partkey#X, value#X]
Arguments: isFinalPlan=true

===== Subqueries =====

Subquery:1 Hosting operator id = 52 Hosting Expression = Subquery subquery#X, [id=#X]
AdaptiveSparkPlan (143)
+- == Final Plan ==
   VeloxColumnarToRow (121)
   +- ^ ProjectExecTransformer (119)
      +- ^ RegularHashAggregateExecTransformer (118)
         +- ^ ProjectExecTransformer (117)
            +- ^ ShuffledHashJoinExecTransformer Inner BuildRight (116)
               :- ^ InputIteratorTransformer (111)
               :  +- VeloxResizeBatches (109)
               :     +- ShuffleQueryStage (108), Statistics(X)
               :        +- ColumnarExchange (107)
               :           +- VeloxResizeBatches (106)
               :              +- ^ ProjectExecTransformer (104)
               :                 +- ^ ShuffledHashJoinExecTransformer Inner BuildRight (103)
               :                    :- ^ InputIteratorTransformer (98)
               :                    :  +- VeloxResizeBatches (96)
               :                    :     +- ShuffleQueryStage (95), Statistics(X)
               :                    :        +- ColumnarExchange (94)
               :                    :           +- VeloxResizeBatches (93)
               :                    :              +- ^ ProjectExecTransformer (91)
               :                    :                 +- ^ FilterExecTransformer (90)
               :                    :                    +- ^ ScanTransformer parquet  (89)
               :                    +- ^ InputIteratorTransformer (102)
               :                       +- ShuffleQueryStage (100), Statistics(X)
               :                          +- ReusedExchange (99)
               +- ^ InputIteratorTransformer (115)
                  +- ShuffleQueryStage (113), Statistics(X)
                     +- ReusedExchange (112)
+- == Initial Plan ==
   HashAggregate (142)
   +- HashAggregate (141)
      +- Project (140)
         +- SortMergeJoin Inner (139)
            :- Sort (133)
            :  +- Exchange (132)
            :     +- Project (131)
            :        +- SortMergeJoin Inner (130)
            :           :- Sort (125)
            :           :  +- Exchange (124)
            :           :     +- Filter (123)
            :           :        +- Scan parquet (122)
            :           +- Sort (129)
            :              +- Exchange (128)
            :                 +- Filter (127)
            :                    +- Scan parquet (126)
            +- Sort (138)
               +- Exchange (137)
                  +- Project (136)
                     +- Filter (135)
                        +- Scan parquet (134)


(89) ScanTransformer parquet 
Output [3]: [ps_suppkey#X, ps_availqty#X, ps_supplycost#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(ps_suppkey)]
ReadSchema: struct<ps_suppkey:bigint,ps_availqty:int,ps_supplycost:decimal(12,2)>

(90) FilterExecTransformer
Input [3]: [ps_suppkey#X, ps_availqty#X, ps_supplycost#X]
Arguments: isnotnull(ps_suppkey#X)

(91) ProjectExecTransformer
Output [4]: [hash(ps_suppkey#X, 42) AS hash_partition_key#X, ps_suppkey#X, ps_availqty#X, ps_supplycost#X]
Input [3]: [ps_suppkey#X, ps_availqty#X, ps_supplycost#X]

(92) WholeStageCodegenTransformer (X)
Input [4]: [hash_partition_key#X, ps_suppkey#X, ps_availqty#X, ps_supplycost#X]
Arguments: false

(93) VeloxResizeBatches
Input [4]: [hash_partition_key#X, ps_suppkey#X, ps_availqty#X, ps_supplycost#X]
Arguments: X, X

(94) ColumnarExchange
Input [4]: [hash_partition_key#X, ps_suppkey#X, ps_availqty#X, ps_supplycost#X]
Arguments: hashpartitioning(ps_suppkey#X, 1), ENSURE_REQUIREMENTS, [ps_suppkey#X, ps_availqty#X, ps_supplycost#X], [plan_id=X], [shuffle_writer_type=hash]

(95) ShuffleQueryStage
Output [3]: [ps_suppkey#X, ps_availqty#X, ps_supplycost#X]
Arguments: X

(96) VeloxResizeBatches
Input [3]: [ps_suppkey#X, ps_availqty#X, ps_supplycost#X]
Arguments: X, X

(97) InputAdapter
Input [3]: [ps_suppkey#X, ps_availqty#X, ps_supplycost#X]

(98) InputIteratorTransformer
Input [3]: [ps_suppkey#X, ps_availqty#X, ps_supplycost#X]

(99) ReusedExchange [Reuses operator id: 16]
Output [2]: [s_suppkey#X, s_nationkey#X]

(100) ShuffleQueryStage
Output [2]: [s_suppkey#X, s_nationkey#X]
Arguments: X

(101) InputAdapter
Input [2]: [s_suppkey#X, s_nationkey#X]

(102) InputIteratorTransformer
Input [2]: [s_suppkey#X, s_nationkey#X]

(103) ShuffledHashJoinExecTransformer
Left keys [1]: [ps_suppkey#X]
Right keys [1]: [s_suppkey#X]
Join condition: None

(104) ProjectExecTransformer
Output [4]: [hash(s_nationkey#X, 42) AS hash_partition_key#X, ps_availqty#X, ps_supplycost#X, s_nationkey#X]
Input [5]: [ps_suppkey#X, ps_availqty#X, ps_supplycost#X, s_suppkey#X, s_nationkey#X]

(105) WholeStageCodegenTransformer (X)
Input [4]: [hash_partition_key#X, ps_availqty#X, ps_supplycost#X, s_nationkey#X]
Arguments: false

(106) VeloxResizeBatches
Input [4]: [hash_partition_key#X, ps_availqty#X, ps_supplycost#X, s_nationkey#X]
Arguments: X, X

(107) ColumnarExchange
Input [4]: [hash_partition_key#X, ps_availqty#X, ps_supplycost#X, s_nationkey#X]
Arguments: hashpartitioning(s_nationkey#X, 1), ENSURE_REQUIREMENTS, [ps_availqty#X, ps_supplycost#X, s_nationkey#X], [plan_id=X], [shuffle_writer_type=hash]

(108) ShuffleQueryStage
Output [3]: [ps_availqty#X, ps_supplycost#X, s_nationkey#X]
Arguments: X

(109) VeloxResizeBatches
Input [3]: [ps_availqty#X, ps_supplycost#X, s_nationkey#X]
Arguments: X, X

(110) InputAdapter
Input [3]: [ps_availqty#X, ps_supplycost#X, s_nationkey#X]

(111) InputIteratorTransformer
Input [3]: [ps_availqty#X, ps_supplycost#X, s_nationkey#X]

(112) ReusedExchange [Reuses operator id: 35]
Output [1]: [n_nationkey#X]

(113) ShuffleQueryStage
Output [1]: [n_nationkey#X]
Arguments: X

(114) InputAdapter
Input [1]: [n_nationkey#X]

(115) InputIteratorTransformer
Input [1]: [n_nationkey#X]

(116) ShuffledHashJoinExecTransformer
Left keys [1]: [s_nationkey#X]
Right keys [1]: [n_nationkey#X]
Join condition: None

(117) ProjectExecTransformer
Output [1]: [CheckOverflow((promote_precision(ps_supplycost#X) * promote_precision(cast(ps_availqty#X as decimal(12,2)))), DecimalType(23,2)) AS _pre_X#X]
Input [4]: [ps_availqty#X, ps_supplycost#X, s_nationkey#X, n_nationkey#X]

(118) RegularHashAggregateExecTransformer
Input [1]: [_pre_X#X]
Keys: []
Functions [1]: [sum(_pre_X#X)]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(ps_supplycost#X) * promote_precision(cast(ps_availqty#X as decimal(12,2)))), DecimalType(23,2)))#X]
Results [1]: [sum(CheckOverflow((promote_precision(ps_supplycost#X) * promote_precision(cast(ps_availqty#X as decimal(12,2)))), DecimalType(23,2)))#X]

(119) ProjectExecTransformer
Output [1]: [CheckOverflow((promote_precision(cast(sum(CheckOverflow((promote_precision(ps_supplycost#X) * promote_precision(cast(ps_availqty#X as decimal(12,2)))), DecimalType(23,2)))#X as decimal(38,10))) * 0.0001000000), DecimalType(38,6)) AS (sum((ps_supplycost * ps_availqty)) * 0.0001000000)#X]
Input [1]: [sum(CheckOverflow((promote_precision(ps_supplycost#X) * promote_precision(cast(ps_availqty#X as decimal(12,2)))), DecimalType(23,2)))#X]

(120) WholeStageCodegenTransformer (X)
Input [1]: [(sum((ps_supplycost * ps_availqty)) * 0.0001000000)#X]
Arguments: false

(121) VeloxColumnarToRow
Input [1]: [(sum((ps_supplycost * ps_availqty)) * 0.0001000000)#X]

(122) Scan parquet
Output [3]: [ps_suppkey#X, ps_availqty#X, ps_supplycost#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(ps_suppkey)]
ReadSchema: struct<ps_suppkey:bigint,ps_availqty:int,ps_supplycost:decimal(12,2)>

(123) Filter
Input [3]: [ps_suppkey#X, ps_availqty#X, ps_supplycost#X]
Condition : isnotnull(ps_suppkey#X)

(124) Exchange
Input [3]: [ps_suppkey#X, ps_availqty#X, ps_supplycost#X]
Arguments: hashpartitioning(ps_suppkey#X, 1), ENSURE_REQUIREMENTS, [plan_id=X]

(125) Sort
Input [3]: [ps_suppkey#X, ps_availqty#X, ps_supplycost#X]
Arguments: [ps_suppkey#X ASC NULLS FIRST], false, 0

(126) Scan parquet
Output [2]: [s_suppkey#X, s_nationkey#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(s_suppkey), IsNotNull(s_nationkey)]
ReadSchema: struct<s_suppkey:bigint,s_nationkey:bigint>

(127) Filter
Input [2]: [s_suppkey#X, s_nationkey#X]
Condition : (isnotnull(s_suppkey#X) AND isnotnull(s_nationkey#X))

(128) Exchange
Input [2]: [s_suppkey#X, s_nationkey#X]
Arguments: hashpartitioning(s_suppkey#X, 1), ENSURE_REQUIREMENTS, [plan_id=X]

(129) Sort
Input [2]: [s_suppkey#X, s_nationkey#X]
Arguments: [s_suppkey#X ASC NULLS FIRST], false, 0

(130) SortMergeJoin
Left keys [1]: [ps_suppkey#X]
Right keys [1]: [s_suppkey#X]
Join condition: None

(131) Project
Output [3]: [ps_availqty#X, ps_supplycost#X, s_nationkey#X]
Input [5]: [ps_suppkey#X, ps_availqty#X, ps_supplycost#X, s_suppkey#X, s_nationkey#X]

(132) Exchange
Input [3]: [ps_availqty#X, ps_supplycost#X, s_nationkey#X]
Arguments: hashpartitioning(s_nationkey#X, 1), ENSURE_REQUIREMENTS, [plan_id=X]

(133) Sort
Input [3]: [ps_availqty#X, ps_supplycost#X, s_nationkey#X]
Arguments: [s_nationkey#X ASC NULLS FIRST], false, 0

(134) Scan parquet
Output [2]: [n_nationkey#X, n_name#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(n_name), EqualTo(n_name,GERMANY), IsNotNull(n_nationkey)]
ReadSchema: struct<n_nationkey:bigint,n_name:string>

(135) Filter
Input [2]: [n_nationkey#X, n_name#X]
Condition : ((isnotnull(n_name#X) AND (n_name#X = GERMANY)) AND isnotnull(n_nationkey#X))

(136) Project
Output [1]: [n_nationkey#X]
Input [2]: [n_nationkey#X, n_name#X]

(137) Exchange
Input [1]: [n_nationkey#X]
Arguments: hashpartitioning(n_nationkey#X, 1), ENSURE_REQUIREMENTS, [plan_id=X]

(138) Sort
Input [1]: [n_nationkey#X]
Arguments: [n_nationkey#X ASC NULLS FIRST], false, 0

(139) SortMergeJoin
Left keys [1]: [s_nationkey#X]
Right keys [1]: [n_nationkey#X]
Join condition: None

(140) Project
Output [2]: [ps_availqty#X, ps_supplycost#X]
Input [4]: [ps_availqty#X, ps_supplycost#X, s_nationkey#X, n_nationkey#X]

(141) HashAggregate
Input [2]: [ps_availqty#X, ps_supplycost#X]
Keys: []
Functions [1]: [partial_sum(CheckOverflow((promote_precision(ps_supplycost#X) * promote_precision(cast(ps_availqty#X as decimal(12,2)))), DecimalType(23,2)))]
Aggregate Attributes [2]: [sum#X, isEmpty#X]
Results [2]: [sum#X, isEmpty#X]

(142) HashAggregate
Input [2]: [sum#X, isEmpty#X]
Keys: []
Functions [1]: [sum(CheckOverflow((promote_precision(ps_supplycost#X) * promote_precision(cast(ps_availqty#X as decimal(12,2)))), DecimalType(23,2)))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(ps_supplycost#X) * promote_precision(cast(ps_availqty#X as decimal(12,2)))), DecimalType(23,2)))#X]
Results [1]: [CheckOverflow((promote_precision(cast(sum(CheckOverflow((promote_precision(ps_supplycost#X) * promote_precision(cast(ps_availqty#X as decimal(12,2)))), DecimalType(23,2)))#X as decimal(38,10))) * 0.0001000000), DecimalType(38,6)) AS (sum((ps_supplycost * ps_availqty)) * 0.0001000000)#X]

(143) AdaptiveSparkPlan
Output [1]: [(sum((ps_supplycost * ps_availqty)) * 0.0001000000)#X]
Arguments: isFinalPlan=true